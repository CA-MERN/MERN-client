{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Modal from \"react-modal\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } // not on log in??\n  // else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(values.password)) {\n  //   errors.password = 'Invalid password';\n  // }\n\n\n  return errors;\n};\n\nconst Login = ({\n  actions,\n  loggedIn\n}) => {\n  _s();\n\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  console.log(\"are we logged in\", loggedIn);\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validate,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Log In:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"loginEmail\",\n        name: \"email\",\n        type: \"email\",\n        class: \"loginEmail\",\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        value: formik.values.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"loginPassword\",\n        name: \"password\",\n        type: \"password\",\n        class: \"loginPassword\",\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        value: formik.values.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), formik.touched.password && formik.errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formik.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: actions.logIn,\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"aihGenu6dC52hwAv1Or6kYRXRs0=\", false, function () {\n  return [useFormik];\n});\n\n_c = Login;\n\nconst mapStateToProps = state => ({\n  loggedIn: state.authentication.loggedIn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: {\n    logIn: dispatch({\n      type: \"login\"\n    })\n  }\n});\n\nexport default connect(mapStateToProps, null)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js"],"names":["React","Modal","connect","useFormik","customStyles","content","top","left","right","bottom","marginRight","transform","validate","values","errors","email","test","password","Login","actions","loggedIn","modalIsOpen","setIsOpen","useState","openModal","console","log","closeModal","formik","initialValues","onSubmit","alert","JSON","stringify","handleSubmit","handleChange","handleBlur","touched","logIn","mapStateToProps","state","authentication","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Modal from \"react-modal\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  }\n  // not on log in??\n  // else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(values.password)) {\n\n  //   errors.password = 'Invalid password';\n\n  // }\n\n  return errors;\n};\n\nconst Login = ({ actions, loggedIn }) => {\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n  console.log(\"are we logged in\", loggedIn);\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n\n      password: \"\",\n    },\n\n    validate,\n\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n\n  return (\n    <div>\n      <h1>Log In:</h1>\n      <form onSubmit={formik.handleSubmit}>\n        <label htmlFor=\"email\">Email Address</label>\n\n        <input\n          id=\"loginEmail\"\n          name=\"email\"\n          type=\"email\"\n          class=\"loginEmail\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n\n        {formik.touched.email && formik.errors.email ? (\n          <div>{formik.errors.email}</div>\n        ) : null}\n\n        <label htmlFor=\"password\">Password</label>\n\n        <input\n          id=\"loginPassword\"\n          name=\"password\"\n          type=\"password\"\n          class=\"loginPassword\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n\n        {formik.touched.password && formik.errors.password ? (\n          <div>{formik.errors.password}</div>\n        ) : null}\n\n        <button type=\"submit\" onClick={actions.logIn}>\n          Log In\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loggedIn: state.authentication.loggedIn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    logIn: dispatch({ type: \"login\" }),\n  },\n});\n\nexport default connect(mapStateToProps, null)(Login);\n"]},"metadata":{},"sourceType":"module"}