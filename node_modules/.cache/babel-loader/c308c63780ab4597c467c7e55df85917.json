{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = 'Required';\n  } else if (values.firstName.length > 15) {\n    errors.firstName = 'Must be 15 characters or less';\n  }\n\n  if (!values.lastName) {\n    errors.lastName = 'Required';\n  } else if (values.lastName.length > 20) {\n    errors.lastName = 'Must be 20 characters or less';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  if (!values.password) {\n    errors.password = 'Required';\n  } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(values.password)) {\n    errors.password = 'Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.';\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = 'Required';\n  } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(values.confirmPassword)) {\n    errors.confirmPassword = 'Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.';\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match.';\n  }\n\n  return errors;\n};\n\nconst Register = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Register:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      return errors;\n    },\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    children: ({\n      isSubmitting\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        type: \"email\",\n        name: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        name: \"email\",\n        component: \"div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        type: \"password\",\n        name: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        name: \"password\",\n        component: \"div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 78,\n  columnNumber: 3\n}, this);\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js"],"names":["React","Formik","Form","Field","ErrorMessage","validate","values","errors","firstName","length","lastName","email","test","password","confirmPassword","Register","name","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;;AAIA,MAAMC,QAAQ,GAAGC,MAAM,IAAI;AAEzB,QAAMC,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACD,MAAM,CAACE,SAAZ,EAAuB;AAErBD,IAAAA,MAAM,CAACC,SAAP,GAAmB,UAAnB;AAED,GAJD,MAIO,IAAIF,MAAM,CAACE,SAAP,CAAiBC,MAAjB,GAA0B,EAA9B,EAAkC;AAEvCF,IAAAA,MAAM,CAACC,SAAP,GAAmB,+BAAnB;AAED;;AAID,MAAI,CAACF,MAAM,CAACI,QAAZ,EAAsB;AAEpBH,IAAAA,MAAM,CAACG,QAAP,GAAkB,UAAlB;AAED,GAJD,MAIO,IAAIJ,MAAM,CAACI,QAAP,CAAgBD,MAAhB,GAAyB,EAA7B,EAAiC;AAEtCF,IAAAA,MAAM,CAACG,QAAP,GAAkB,+BAAlB;AAED;;AAID,MAAI,CAACJ,MAAM,CAACK,KAAZ,EAAmB;AAEjBJ,IAAAA,MAAM,CAACI,KAAP,GAAe,UAAf;AAED,GAJD,MAIO,IAAI,CAAC,4CAA4CC,IAA5C,CAAiDN,MAAM,CAACK,KAAxD,CAAL,EAAqE;AAE1EJ,IAAAA,MAAM,CAACI,KAAP,GAAe,uBAAf;AAED;;AAED,MAAI,CAACL,MAAM,CAACO,QAAZ,EAAsB;AAEpBN,IAAAA,MAAM,CAACM,QAAP,GAAkB,UAAlB;AAED,GAJD,MAIO,IAAI,CAAC,wEAAwED,IAAxE,CAA6EN,MAAM,CAACO,QAApF,CAAL,EAAoG;AAEzGN,IAAAA,MAAM,CAACM,QAAP,GAAkB,8GAAlB;AAED;;AAED,MAAI,CAACP,MAAM,CAACQ,eAAZ,EAA6B;AAE3BP,IAAAA,MAAM,CAACO,eAAP,GAAyB,UAAzB;AAED,GAJD,MAIO,IAAI,CAAC,wEAAwEF,IAAxE,CAA6EN,MAAM,CAACQ,eAApF,CAAL,EAA2G;AAEhHP,IAAAA,MAAM,CAACO,eAAP,GAAyB,8GAAzB;AAED,GAJM,MAIA,IAAIR,MAAM,CAACO,QAAP,KAAoBP,MAAM,CAACQ,eAA/B,EAAgD;AAErDP,IAAAA,MAAM,CAACO,eAAP,GAAyB,yBAAzB;AACD;;AAID,SAAOP,MAAP;AAED,CAjED;;AAqEC,MAAMQ,QAAQ,GAAG,mBAEhB;AAAA,0BAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA,eAIA,QAAC,MAAD;AAEE,IAAA,aAAa,EAAE;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYL,MAAAA,KAAK,EAAE,EAAnB;AAAuBE,MAAAA,QAAQ,EAAE,EAAjC;AAAqCC,MAAAA,eAAe,EAAE;AAAtD,KAFjB;AAIE,IAAA,QAAQ,EAAER,MAAM,IAAI;AAElB,YAAMC,MAAM,GAAG,EAAf;;AAEA,UAAI,CAACD,MAAM,CAACK,KAAZ,EAAmB;AAEjBJ,QAAAA,MAAM,CAACI,KAAP,GAAe,UAAf;AAED,OAJD,MAIO,IAEL,CAAC,2CAA2CC,IAA3C,CAAgDN,MAAM,CAACK,KAAvD,CAFI,EAIL;AAEAJ,QAAAA,MAAM,CAACI,KAAP,GAAe,uBAAf;AAED;;AAED,aAAOJ,MAAP;AAED,KAxBH;AA0BE,IAAA,QAAQ,EAAE,CAACD,MAAD,EAAS;AAAEW,MAAAA;AAAF,KAAT,KAA+B;AAEvCC,MAAAA,UAAU,CAAC,MAAM;AAEfC,QAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAef,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AAEAW,QAAAA,aAAa,CAAC,KAAD,CAAb;AAED,OANS,EAMP,GANO,CAAV;AAQD,KApCH;AAAA,cAwCG,CAAC;AAAEK,MAAAA;AAAF,KAAD,kBAEC,QAAC,IAAD;AAAA,8BAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,SAAS,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,cAJF,eAME,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,cANF,eAQE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAC,UAAnB;AAA8B,QAAA,SAAS,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,cARF,eAUE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AA1CJ;AAAA;AAAA;AAAA;AAAA,UAJA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD;;KAAMP,Q;AA8EP,eAAeA,QAAf","sourcesContent":["import React from 'react';\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\n\n\nconst validate = values => {\n\n  const errors = {};\n\n  if (!values.firstName) {\n\n    errors.firstName = 'Required';\n\n  } else if (values.firstName.length > 15) {\n\n    errors.firstName = 'Must be 15 characters or less';\n\n  }\n\n\n\n  if (!values.lastName) {\n\n    errors.lastName = 'Required';\n\n  } else if (values.lastName.length > 20) {\n\n    errors.lastName = 'Must be 20 characters or less';\n\n  }\n\n\n\n  if (!values.email) {\n\n    errors.email = 'Required';\n\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\n    errors.email = 'Invalid email address';\n\n  }\n\n  if (!values.password) {\n\n    errors.password = 'Required';\n\n  } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(values.password)) {\n\n    errors.password = 'Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.';\n\n  }\n\n  if (!values.confirmPassword) {\n\n    errors.confirmPassword = 'Required';\n\n  } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(values.confirmPassword)) {\n\n    errors.confirmPassword = 'Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.';\n\n  } else if (values.password !== values.confirmPassword) {\n\n    errors.confirmPassword = 'Passwords do not match.'\n  }\n\n\n\n  return errors;\n\n};\n\n \n\n const Register = () => (\n\n  <div>\n\n  <h1>Register:</h1>\n\n  <Formik\n\n    initialValues={{ name: '', email: '', password: '', confirmPassword: '' }}\n\n    validate={values => {\n\n      const errors = {};\n\n      if (!values.email) {\n\n        errors.email = 'Required';\n\n      } else if (\n\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n\n      ) {\n\n        errors.email = 'Invalid email address';\n\n      }\n\n      return errors;\n\n    }}\n\n    onSubmit={(values, { setSubmitting }) => {\n\n      setTimeout(() => {\n\n        alert(JSON.stringify(values, null, 2));\n\n        setSubmitting(false);\n\n      }, 400);\n\n    }}\n\n  >\n\n    {({ isSubmitting }) => (\n\n      <Form>\n\n        <Field type=\"email\" name=\"email\" />\n\n        <ErrorMessage name=\"email\" component=\"div\" />\n\n        <Field type=\"password\" name=\"password\" />\n\n        <ErrorMessage name=\"password\" component=\"div\" />\n\n        <button type=\"submit\" disabled={isSubmitting}>\n\n          Submit\n\n        </button>\n\n      </Form>\n\n    )}\n\n  </Formik>\n\n</div>\n\n);\n\n\n\n\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}