[{"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/index.js":"1","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers.js":"2","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reportWebVitals.js":"3","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/App.js":"4","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/authServices.js":"5","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/modals/index.js":"6","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/preferences/index.js":"7","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/login/index.js":"8","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/index.js":"9","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/userSettings/index.js":"10","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/notFound/index.js":"11","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/home/index.js":"12","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/nav/index.js":"13","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/fridge/index.js":"14","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/footer/index.js":"15","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/config/api.js":"16","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/list.js":"17","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/utils/get-user-preferences/index.js":"18","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/logo/index.js":"19","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/ingredientAutocomplete/index.js":"20","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/AuthenticationModal/index.js":"21","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/searchButton/index.js":"22","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/login/index.js":"23","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/register/index.js":"24","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/ingredientServices.js":"25","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/recipeServices.js":"26","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/logged-in/index.js":"27"},{"size":965,"mtime":1610526590750,"results":"28","hashOfConfig":"29"},{"size":270,"mtime":1610526590751,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1607657595793,"results":"31","hashOfConfig":"29"},{"size":4243,"mtime":1610526590725,"results":"32","hashOfConfig":"29"},{"size":2331,"mtime":1610526590757,"results":"33","hashOfConfig":"29"},{"size":459,"mtime":1608640525396,"results":"34","hashOfConfig":"29"},{"size":460,"mtime":1610526590755,"results":"35","hashOfConfig":"29"},{"size":759,"mtime":1610526590753,"results":"36","hashOfConfig":"29"},{"size":3241,"mtime":1610526590739,"results":"37","hashOfConfig":"29"},{"size":4056,"mtime":1610526590746,"results":"38","hashOfConfig":"29"},{"size":336,"mtime":1610526590738,"results":"39","hashOfConfig":"29"},{"size":1362,"mtime":1610526590731,"results":"40","hashOfConfig":"29"},{"size":5467,"mtime":1610526590735,"results":"41","hashOfConfig":"29"},{"size":382,"mtime":1610526590729,"results":"42","hashOfConfig":"29"},{"size":193,"mtime":1610526590728,"results":"43","hashOfConfig":"29"},{"size":225,"mtime":1610526590747,"results":"44","hashOfConfig":"29"},{"size":210,"mtime":1610526590740,"results":"45","hashOfConfig":"29"},{"size":212,"mtime":1610526590763,"results":"46","hashOfConfig":"29"},{"size":262,"mtime":1610526590734,"results":"47","hashOfConfig":"29"},{"size":794,"mtime":1610526590731,"results":"48","hashOfConfig":"29"},{"size":1507,"mtime":1610526590726,"results":"49","hashOfConfig":"29"},{"size":266,"mtime":1610526590743,"results":"50","hashOfConfig":"29"},{"size":3425,"mtime":1610526590733,"results":"51","hashOfConfig":"29"},{"size":5085,"mtime":1610526590742,"results":"52","hashOfConfig":"29"},{"size":1692,"mtime":1610526590760,"results":"53","hashOfConfig":"29"},{"size":870,"mtime":1610526590761,"results":"54","hashOfConfig":"29"},{"size":852,"mtime":1610526590732,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"8oth7u",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/index.js",["118"],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers.js",[],["119","120"],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reportWebVitals.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/App.js",["121","122"],"import { connect } from \"react-redux\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport {\n  setLoggedInUser,\n  getLoggedInUser,\n  getUsername,\n  setUsername,\n} from \"./services/authServices\";\n\nimport { ToastContainer } from \"react-toastify\";\n\n\nimport store from \"./index\";\nimport UserSettings from \"./components/userSettings\";\nimport Preferences from \"./components/preferences\";\nimport BrowseRecipes from \"./components/browseRecipes\";\nimport SavedRecipes from \"./components/savedRecipes\";\nimport SingleRecipe from \"./components/singleRecipe\";\nimport ResetPassword from \"./components/resetPassword\";\nimport NotFound from \"./components/notFound\";\nimport Nav from \"./components/nav\";\nimport Home from \"./components/home\";\nimport Fridge from \"./components/fridge\";\nimport Pantry from \"./components/pantry\";\nimport Footer from \"./components/footer\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n\n\n//NOTE TO CHANGE THE BELOW ROUTES BACK TO PRIVATE ROUTE AFTER ALL CODE IS DONE\n//MAYBE ADD TOAST NOTIFCATION BELOW?\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n\n  const isLoggedIn = getUsername();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLoggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n        )\n      }\n    />\n  );\n};\n\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render={(props) => (\n//       getLoggedInUser() === true\n//         ? <Component {...props} />\n//         : <Redirect to='/' />\n//   )} />\n// )\n\nconst App = ({ actions }) => {\n  \n  useEffect(( ) => {\n\n    try {\n      actions.logIn(getUsername());\n      actions.getToken(getLoggedInUser());\n    } catch (error) {\n      console.log(\"got an error trying to check authenticated user:\", error);\n      setLoggedInUser();\n      setUsername();\n      actions.logout();\n    }\n\n    // return a function that specifies any actions on component unmount\n    return () => {};\n  }, []);\n  return (\n    <Fragment>\n      <Helmet>\n        <title>FridgeMate</title>\n        <meta name=\"description\" content=\"Helmet application\" />\n      </Helmet>\n      <CssBaseline />\n      <BrowserRouter>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route\n            exact\n            path=\"/preferences/:username\"\n            component={Preferences}\n          />\n          <Route\n            exact\n            path=\"/user/:username/account-settings\"\n            component={UserSettings}\n          />\n          <Route\n            exact\n            path=\"/ingredients/:username/fridge\"\n            component={Fridge}\n          />\n          <Route\n            exact\n            path=\"/recipes/browse\"\n            component={BrowseRecipes}\n          />\n          <Route exact path=\"/recipes/:id/recipe\" component={SingleRecipe} />\n          <Route\n            exact\n            path=\"/recipes/saved-recipes\"\n            component={SavedRecipes}\n          />\n          <Route\n            exact\n            path=\"/ingredients/:username/pantry\"\n            component={Pantry}\n          />\n          <Route\n            exact\n            path=\"/user/reset-password/:token\"\n            component={ResetPassword}\n          />\n          <Route component={NotFound} />\n        </Switch>\n        <ToastContainer />\n      </BrowserRouter>\n      <Footer />\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      store.dispatch({ type: \"openModal\", payload: modalId });\n      console.log(\"APP JS STORE\", store.getState());\n    },\n    logIn: (username) => dispatch({ type: \"login\", payload: username }),\n    getToken: (jwt) => dispatch({ type: \"token\", payload: jwt }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/authServices.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/modals/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/preferences/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/login/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/index.js",["123","124","125"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Field, Form, useFormik } from \"formik\";\n\nimport {preferencesList, preferencesName } from \"./list\";\n\nimport {\n  getPreference,\n  updatePreference,\n  getUsername,\n  getPref,\n  setPref\n} from \"../../services/authServices\";\n\nimport Logo from \"../logo\";\nimport Loading from \"../loading\";\n\nimport styles from \"./preferences.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport pantrycartoon from \"../styles/imgs/pantrycartoon.png\";\n\n\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from '@material-ui/core/Fade';\n\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\n//need to write input validation - boolean only\nconst validate = (values) => {\n  const errors = {};\n  return errors;\n};\n\n// preferences component, is passed:\n// userPreferences which is state?\n// actions: which is submit (to db) and get payload/data from db.\nconst Preferences = ({ actions, userPreferences, userLoggedIn }) => {\n  const classes = useStyles();\n   let history = useHistory();\n   const [checked, setChecked] = useState(null);\n   const [loading, setloading] = useState({ done: false });\n\n\n\n  // On page load- This is calling the DB get request to get the initial user preference data\n  useEffect(() => {\n    getPreference(getUsername())\n      .then((pref) => {\n        setPref({ ...pref })\n        actions.updatePreferences(JSON.parse(getPref()));\n        setChecked(JSON.parse(getPref()))\n        //console.log(\"check local\", JSON.parse(getPref()))\n        //console.log(\"check redux\", userPreferences)\n      })\n      .catch((error) => {\n        //console.log(\"errors\");\n        //console.log(error.response);\n        if (error.response && error.response.status === 404)\n          //formik.setStatus(\"Error getting pref information \");\n          toast.error(\"Sorry we could not get your information at this time.\")\n        else\n          // formik.setStatus(\n          //   \"There may be a problem with the server. Please try again after a few moments.\"\n          // );\n          toast.error(\"There may be a problem with the server. Please try again after a few moments.\")\n      });\n        setTimeout(() => {\n        setloading({ done: true })\n        //console.log(\"check loading done\")  \n        }, 3000);\n  }, []);\n\n\n  const formik = useFormik({\n    //calls boolean validation\n    validate,\n  });\n\n  function submitHandler (values) {\n      //console.log(\"check\",  values )\n       setloading({ done: false })\n          updatePreference({ ...values }, getUsername())\n            .then((pref) => {\n              //console.log(pref);\n              setPref(pref)\n              actions.updatePreferences(pref);\n              setTimeout(() => {\n                setloading({ done: true })\n                 //console.log(\"check loading done\")  \n                 //console.log(\"test returned\", JSON.parse(getPref()))\n                 history.push(\"/preferences/\"+getUsername())\n                 toast.success(\"Preferences Updated!\")\n                }, 3000);\n            })\n            .catch((error) => {\n              if (error.response && error.response.status === 404)\n                //formik.setStatus(\"Error getting pref information \");\n                toast.error(\"Sorry we could not submit your request at this time.\")\n              else\n                // formik.setStatus(\n                //   \"There may be a problem with the server. Please try again after a few moments.\"\n                // );\n                 toast.error(\"There may be a problem with the server. Please try again after a few moments.\")\n            });\n    }\n\n  return (\n    <div className={classes.root}>\n    <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>Preferences</h1>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n          {!loading.done ? (\n           <Loading/>\n              ) : (  \n            <> \n                  <div class={appstyles.subheading}>Select from the preferences below and we will only show you recipes that match.</div>\n                    <div className={styles.prefBox}>\n                      \n                          <div class={styles.formBox}>\n                                  <Formik\n                                    initialValues={{ \"vegetarian\": userPreferences.vegetarian,\n                                      \"vegan\": userPreferences.vegan,\n                                      \"glutenFree\": userPreferences.glutenFree,\n                                      \"dairyFree\": userPreferences.dairyFree,\n                                      \"veryHealthy\": userPreferences.veryHealthy,\n                                      \"cheap\": userPreferences.cheap,\n                                      \"veryPopular\": userPreferences.veryPopular,\n                                      \"sustainable\": userPreferences.sustainable}}\n                          \n                                      onSubmit={async (values) => {\n                                        await sleep(500);\n                                        submitHandler(values)\n                                      }}\n                                >\n                                  {({ values }) => (\n                                    <Form>\n                                      {/* form maps over list in ./list.js, can update more easily if needed */}\n                                      {preferencesList.map((preference, index) => (\n                                  \n                                              <label key={index}>\n                                                <Field  type=\"checkbox\" name={preference}/>  \n                                                 <span class={styles.prefItem}>{preferencesName[index]}</span>  \n                                              </label>\n                                    \n                                       ))}\n                                      <Button\n                                        class={styles.updateButton}\n                                        type=\"submit\"   \n                                      >\n                                        Update Preferences\n                                      </Button>\n                                    </Form>\n                                  )}\n                                </Formik>\n                        </div>\n                      <div class={styles.imgBox}>\n                        <img alt=\"cartoon ingredients\" src={pantrycartoon} />\n                      </div>\n                    </div>\n                </>\n              )}\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\n//checks state\nconst mapStateToProps = (state) => ({\n  userPreferences: state.userPreferences.preferences,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\n//updates state\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    updatePreferences: (data) =>\n      dispatch({ type: \"updatePreferences\", payload: data }),\n    submit: () => dispatch({ type: \"submit\" }),\n  },\n});\n\n//sends to reducer\nexport default connect(mapStateToProps, mapDispatchToProps)(Preferences);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/userSettings/index.js",["126"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./userSettings.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport {\n  getUserSettings,\n  updateUserSettings,\n  getUsername,\n  setUsername,\n  setProfile,\n} from \"../../services/authServices\";\n\nimport ProfileImage from \"../profileImage\";\nimport Logo from \"../logo\";\nimport Loading from \"../loading\";\n\nimport ProfileDefault from \"../styles/imgs/profileDefault.png\";\n\nimport Fade from 'react-reveal/Fade';\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from '@material-ui/core/Fade';\n\nimport {toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.username) {\n    errors.username = \"Required\";\n  } else if (values.username.length > 15) {\n    errors.username = \"Must be 15 characters or less\";\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.password\n    )\n  ) {\n    errors.password =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.confirmPassword\n    )\n  ) {\n    errors.confirmPassword =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match.\";\n  }\n\n  return errors;\n};\n\nconst UserSettings = ({ actions, currentUserSettings, userLoggedIn }) => {\n  const classes = useStyles();\n  const [loading, setloading] = useState({ done: false });\n  const text = {\n      color: 'red',\n      marginLeft: \"10px\"\n    }; \n\n\n let history = useHistory();\n  useEffect(() => {\n    getUserSettings(getUsername())\n      .then((user) => {\n        //console.log(user)\n        actions.settings(user);\n        actions.updateUsername(user.username);\n        setProfile(user.profile)\n        setUsername(user.username);\n      })\n      .then(() => {\n        //console.log(currentUserSettings);\n      })   \n      .catch((error) => {\n        console.log(\"errors\");\n        //console.log(error.response);\n        if (error.response && error.response.status === 404)\n          formik.setStatus(\"Sorry we could not get your information at this time.\");\n        else\n          formik.setStatus(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n        setTimeout(() => {\n          setloading({ done: true })\n          console.log(\"check loading done\")  \n                }, 4000);\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n\n      email: \"\",\n\n      password: \"\",\n\n      confirmPassword: \"\",\n    },\n\n    validate,   \n\n    onSubmit: (values) => {\n      updateUserSettings({ ...values }, userLoggedIn)\n        .then((user) => {\n          //console.log(user);\n          actions.settings({ ...user });\n          actions.updateUsername(user.username);\n          setUsername(user.username);\n          setProfile(user.profile);\n          history.push(\"/user/\"+getUsername()+\"/account-settings\")\n          toast.success(\"User information updated!\")\n        })\n        .catch((error) => {\n          //console.log(\"errors\")\n          //console.log(error.response)\n           toast.error(\"Oh no, error!\")\n          if (error.response && error.response.status === 404)\n            formik.setStatus(\"Sorry we could not submit your request at this time.\");\n          else\n            formik.setStatus(\n               \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n        });\n    },\n  });\n\n  return (\n    <div className={classes.root}>\n    <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>User Settings</h1>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n              {!loading.done ? (\n           <Loading/>\n              ) : (  \n            <> \n                      <div class={styles.settingsBox}>\n                        <Fade bottom >\n                        {formik.status && <div style={text}>Error: {formik.status}. </div>}\n                        </Fade>\n                        <form onSubmit={formik.handleSubmit}>\n                          <div class={styles.profileBox}>\n                            {currentUserSettings.profile ? (\n                              <img alt=\"profile of user\"src={currentUserSettings.profile} />\n                            ) : (\n                              <img alt=\"default profile \" src={ProfileDefault} />\n                            )}\n                          </div>    \n                          <label htmlFor=\"photo\" class={styles.profileBox}>\n                            Update Profile Picture\n                          </label>\n                              <div class={styles.fileBox}>\n                                <ProfileImage />\n                              \n                              </div>\n                          <label htmlFor=\"username\">Username</label>\n\n                          <input\n                            id=\"userSettingsName\"\n                            name=\"username\"\n                            type=\"text\"\n                            placeholder={currentUserSettings.username}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.username}\n                          />\n\n                          {formik.touched.username && formik.errors.username ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.username}</div>\n                            </Fade>\n                          ) : null}\n                \n\n                          <label htmlFor=\"email\">Email Address</label>\n\n                          <input\n                            id=\"userSettingsEmail\"\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder={currentUserSettings.email}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.email}\n                          />\n\n                          {formik.touched.email && formik.errors.email ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.email}</div>\n                            </Fade>\n                          ) : null}\n\n                          <label htmlFor=\"password\">Password</label>\n\n                          <input\n                            id=\"userSettingsPassword\"\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.password}\n                          />\n\n                          {formik.touched.password && formik.errors.password ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.password}</div>\n                            </Fade>\n                          ) : null}\n\n                          <label htmlFor=\"confirmPassword\">Password</label>\n\n                          <input\n                            id=\"userSettingsConfirmPassword\"\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Retype Password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.confirmPassword}\n                          />\n\n                          {formik.touched.confirmPassword &&\n                          formik.errors.confirmPassword ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.confirmPassword}</div>\n                            </Fade>\n                          ) : null}\n\n                          <Button variant=\"contained\" class={styles.updateButton} type=\"submit\">\n                            Update Details\n                          </Button>\n                        </form>\n                    </div>\n                 \n                  </>\n                )}     \n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentUserSettings: state.currentUserSettings,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    settings: ({ email, username, profile }) =>\n      dispatch({ type: \"settings\", payload: { email, username, profile } }),\n    updateUsername: (username) =>\n      dispatch({ type: \"updateUsername\", payload: username }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettings);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/notFound/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/home/index.js",["127","128","129"],"import { connect } from \"react-redux\";\nimport React, { useState,useEffect } from \"react\";\n\nimport pantrycartoon from \"../styles/imgs/pantrycartoon.png\";\nimport SearchRecipeButton from \"../searchButton\";\nimport styles from \"./home.module.css\";\nimport Logo from \"../logo\";\nimport Carousel from \"../carousel\";\nimport jokes from \"../../data/recipeJokes.json\";\nimport Fade from 'react-reveal/Fade';\nimport Swing from 'react-reveal/Swing';\nimport Fadein from '@material-ui/core/Fade';\n\n\n\nconst Home = ({ actions, userLoggedIn }) => {\n  const [joke, setJoke] = useState(\"\");\n  \n  const text = {\n        color: '#3F7209',\n        marginLeft: \"10px\"\n  }; \n\n  const img = {\n        width: '10%',\n        alignSelf: \"center\",\n        borderRadius: \"50%\"\n  }; \n\n  useEffect(() => {\n       let randomObject = jokes[Math.floor(Math.random() * jokes.length)];\n       setJoke(randomObject.name)\n       console.log(randomObject.name)\n       \n      },[])\n\n  return (\n    <div className={styles.homeLayoutOnly}>\n      <Logo />\n       <Fadein in={true} timeout={2000}  >\n      <main class={styles.homeContent}>\n        <div class={styles.homeBox}>\n         <Fade top>\n           <p style={text}>{joke}</p>\n         </Fade>\n           \n          <Swing>\n          <h1 >What is in your fridge?</h1>\n            </Swing>\n          \n          <Fade bottom>\n          <h3 >\n            Just add ingredients to your fridge and FridgeMate will help find recipes\n            personlised to you!\n          </h3>\n         </Fade>\n           <Carousel/>\n        </div>\n      </main>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/nav/index.js",["130","131","132","133","134"],"import React, { Fragment} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./nav.module.css\";\n\nimport SearchRecipeButton from \"../searchButton\";\nimport AuthenticationModal from \"../AuthenticationModal\";\nimport {logoutUser } from \"../../services/authServices\";\n\n\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Fadein from '@material-ui/core/Fade';\nimport HelpIcon from '@material-ui/icons/Help';\n\n\n\n//IMAGES-icons\nimport fridge from \"../styles/imgs/fridge.png\";\nimport pantry from \"../styles/imgs/pantry.png\";\nimport pref from \"../styles/imgs/preference.png\";\nimport list from \"../styles/imgs/list.png\";\nimport ProfileDefault from \"../styles/imgs/profileDefault.png\";\n\n//FOOD IMAGES\nimport carrot from \"../styles/imgs/carrot.png\";\nimport chilli from \"../styles/imgs/chilli.png\";\nimport corn from \"../styles/imgs/corn.png\";\nimport egg from \"../styles/imgs/egg.png\";\nimport garlic from \"../styles/imgs/garlic.png\";\nimport radish from \"../styles/imgs/radish.png\";\nimport ramen from \"../styles/imgs/ramen.png\";\nimport tomato from \"../styles/imgs/tomato.png\";\n\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst NavBar = ({ actions, userLoggedIn, currentUserSettings,currentProfile }) => {\n  let history = useHistory();\n  //const [profile, setProfile] = useState(\"\");\n  const { setModalOpen } = actions;\n  const listFoodImg = [\n    carrot,\n    chilli,\n    corn,\n    egg,\n    garlic,\n    radish,\n    ramen,\n    tomato,\n  ];\n  let randomFoodImg =\n    listFoodImg[Math.floor(Math.random() * listFoodImg.length)];\n\n  function handleLogout() {\n    logoutUser()\n      .then((r) => {\n        //console.log(\"Got back response on logout\", r);\n        console.log(\"loged out\")\n        history.push(\"/\");\n        toast.success(\"Come back soon!\")\n      })\n      .catch((error) => {\n        toast.error(\"Oh no, error loggin out!\", error)\n        console.log(\n          \"The server may be down - caught an exception on logout:\",\n          error\n        );\n      });\n      \n    //clear storage if error\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"username\")\n    localStorage.removeItem(\"fridge\")\n    localStorage.removeItem(\"pantry\")\n    localStorage.removeItem(\"browsedRecipes\")\n    localStorage.removeItem(\"profile\")\n    actions.removeProfile()\n    actions.logout()\n    \n}\n\n  return (\n    <div class={styles.navBox}>\n      <AuthenticationModal />\n      <a class={styles.trigger}>\n        <i>\n          <MoreVertIcon />\n        </i>\n      </a>\n      <Fadein in={true}  timeout={2000}>\n      <nav class={styles.nav}>\n        <ul>\n          <li>\n            <Link to={\"/user/\" + userLoggedIn + \"/account-settings\"}>\n              <div class={styles.userProfile}>\n                {currentProfile ? (\n                  <img alt=\"profile of user\" src={currentProfile} /> ) : (\n                  <img src={ProfileDefault} /> )}\n                {userLoggedIn ? <div>{userLoggedIn}</div> : <div></div>}\n              </div>\n            </Link>\n          </li>\n          <li>\n            <SearchRecipeButton />\n            <a class={styles.navLink}></a>\n          </li>\n          <li>\n            <Link\n              to={\"/ingredients/\" + userLoggedIn + \"/fridge\"}\n              class={styles.navLink}\n            >\n              <img alt=\"Fridge\" src={fridge} />\n              <div>My Fridge</div>\n            </Link>\n          </li>\n          <li>\n            <Link to={`/ingredients/${userLoggedIn}/pantry`} class={styles.navLink}>\n              <img alt=\"Pantry\" src={pantry} />\n              <div>Pantry Staples</div>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/recipes/saved-recipes\" class={styles.navLink}>\n              <img alt=\"list\" src={list} />\n              <div>Saved Recipes</div>\n            </Link>\n          </li>\n          <li>\n            <Link to={\"/preferences/\" + userLoggedIn} class={styles.navLink}>\n              <img alt=\"preference\" src={pref} />\n              <div> My Preferences</div>\n            </Link>\n          </li>\n          <li class={styles.foodPic}>\n            <img alt=\"picture of food\" src={randomFoodImg} />\n          </li>\n          <li class={styles.navButtons}>\n            <Fragment>\n              {userLoggedIn ? (\n                <Fragment>\n                  {\" \"}\n                  <Button variant=\"outlined\" class={styles.navButtonstyle} onClick={handleLogout}>\n                    Log out\n                  </Button>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <Button\n                    variant=\"outlined\"\n                    class={styles.navButtonstyle}\n                    onClick={() => setModalOpen(\"login\")}\n                  >\n                    Login\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    class={styles.navButtonstyle}\n                    onClick={() => setModalOpen(\"register\")}\n                  >\n                    Register\n                  </Button>\n                </Fragment>\n              )}\n              \n            </Fragment>\n          </li>\n          <li style={{ textAlign: 'left', padding: '10px', }}>\n            <Button \n             onClick={() => setModalOpen(\"help\")}>\n            <HelpIcon/>\n            </Button>\n          </li>\n        </ul>\n           \n      </nav>\n    </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n  currentUserSettings: state.currentUserSettings,\n  currentProfile: state.currentUserSettings.profile,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n    logIn: () => dispatch({ type: \"login\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n    removeProfile: () => dispatch({ type: \"removeProfile\" }),\n    updateProfile: ({ profile }) =>\n      dispatch({ type: \"updateProfile\", payload: {profile } }),\n  },\n});\n\n// export default navBar;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/fridge/index.js",["135"],"import React, { Fragment, useEffect,useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { deleteAllFridge,getAllFridgeIngredients, getFridge, setFridge } from '../../services/ingredientServices'\nimport {getUsername} from '../../services/authServices'\n\nimport styles from \"./fridge.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport AutocompleteIngredients from \"../ingredientAutocomplete\";\nimport Ingredients from \"../ingredient\";\nimport NoIngredients from \"../noItemsPage\";\nimport Logo from \"../logo\";\nimport SearchRecipeButton from \"../searchButton\";\nimport Loading from \"../loading\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Fadein from '@material-ui/core/Fade';\n\nimport fridge from \"../styles/imgs/fridge.png\";\n\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst Fridge = ({actions, fridgeIngredients}) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [errors, setErrors] = useState(null);\n   const [loading, setloading] = useState({ done: false });\n  \n\n  const checker = getFridge()\n  console.log(checker)\n\n  useEffect(() => {\n    //update this so if local storage is full of ingredients dont call the DB\n    getAllFridgeIngredients(getUsername()).then((r) => {\n                console.log(r)\n                actions.addToFridge(r.fridgeIngredients)\n                setFridge(r.fridgeIngredients)\n                history.push(\"/ingredients/\"+getUsername()+\"/fridge\")\n            }).catch((error) => {\n              //console.log(\"errors\")\n              //console.log(error.response)\n                if (error.response && error.response.status === 401)\n                actions.changeError(\"Error getting fridge ingredients\")\n                else   \n                actions.changeError(\"There may be a problem with the server. Please try again after a few moments.\")\n            })    \n      setTimeout(() => {\n      setloading({ done: true })\n      console.log(\"check loading done\")  \n            }, 2500);\n  },[])\n\n\n  const handleClearFridge = async () => {\n        console.log(\"emptying all fridge\");\n         deleteAllFridge(getUsername()).then((r) => {\n              console.log(r)\n              actions.clearFridge()\n              setFridge()\n              history.push(\"/ingredients/\"+getUsername()+\"/fridge\")\n              toast.warn(\"You have no ingredients left in your fridge!\")\n          }).catch((error) => {\n            //console.log(\"errors\")\n            //console.log(error.response)\n              toast.error(\"Oh no, error!\")\n              if (error.response && error.response.status === 401)\n              setErrors(\"Error clearing your Fridge\")\n              else   \n              setErrors(\"There may be a problem with the server. Please try again after a few moments.\")\n          })\n  };\n\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0} >\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>My Fridge</h1>\n             <div class={styles.searchButtonMove}>\n                <SearchRecipeButton/>\n              </div>\n          </Grid>\n        \n      \n          <Grid item xs={12} spacing={2}>\n      \n         \n            <div class={appstyles.layoutContent}>\n                   {errors && <div>Error: {errors}</div>}\n            {!loading.done ? (\n           <Loading/>\n              ) : (  \n            <>\n             <div class={appstyles.subheading}>Add ingredients to your Fridge Below and we will use them to find you recipes!</div>\n                  \n               <div class={styles.fridgeAutoBox}> \n              <AutocompleteIngredients type=\"fridge\"/> \n              <div class={styles.fridge}> <img alt=\"Fridge cartoon\" src={fridge} /></div>\n              </div>\n              <Grid container spacing={1} wrap=\"wrap\" alignItems=\"center\" justify=\"center\" class={styles.background}>\n              {checker ?  <Ingredients ingredients={fridgeIngredients}/> : <NoIngredients type=\"fridge\" image={fridge}/>  } \n              </Grid>\n              {checker  ?   <div className={styles.button} ><Button variant=\"outlined\" width=\"100px\" onClick={() => { handleClearFridge() }}>Clear All Fridge Contents</Button></div> : <div></div>  } \n               </>\n              )}\n            \n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state) => ({\n  fridgeIngredients: state.userIngredients.fridgeIngredients,\n  error: state.errorsMessages\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    addToFridge: ( ingredients ) =>\n      dispatch({ type: \"fridgeIngredients\", payload: ingredients }),\n    clearFridge: () => dispatch({ type: \"deleteAllFridge\" }),\n    changeError: ( error ) =>\n      dispatch({ type: \"error\", payload: error }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Fridge);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/footer/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/config/api.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/list.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/utils/get-user-preferences/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/logo/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/ingredientAutocomplete/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/AuthenticationModal/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/searchButton/index.js",["136"],"import React from \"react\";\nimport { Link } from 'react-router-dom'\nimport { connect } from \"react-redux\";\nimport styles from \"./searchButton.module.css\";\nimport {getUsername } from \"../../services/authServices\";\n//MATERIAL\nimport Button from '@material-ui/core/Button';\n\n\nconst SearchRecipeButton = ({actions,userLoggedIn}) => {\n  const { setModalOpen } = actions;\n    if (userLoggedIn){\n      return(\n          <Link to={\"/recipes/browse\"}>\n            <Button variant=\"outlined\" class={styles.searchButtonOutline}>\n               Browse Recipes! \n            </Button>\n          </Link>\n      )\n\n    } else {\n      return(\n\n      <Button variant=\"outlined\" \n      onClick={() => setModalOpen(\"register\")}\n      class={styles.searchButtonOutline}>\n      Start Searching!\n      </Button>\n\n        )}\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n  },\n});\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchRecipeButton);\n\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/login/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/register/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/ingredientServices.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/recipeServices.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/logged-in/index.js",["137"],{"ruleId":"138","severity":1,"message":"139","line":6,"column":23,"nodeType":"140","messageId":"141","endLine":6,"endColumn":30},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"138","severity":1,"message":"146","line":35,"column":7,"nodeType":"140","messageId":"141","endLine":35,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":77,"column":6,"nodeType":"149","endLine":77,"endColumn":8,"suggestions":"150"},{"ruleId":"138","severity":1,"message":"151","line":50,"column":11,"nodeType":"140","messageId":"141","endLine":50,"endColumn":18},{"ruleId":"147","severity":1,"message":"148","line":81,"column":6,"nodeType":"149","endLine":81,"endColumn":8,"suggestions":"152"},{"ruleId":"138","severity":1,"message":"153","line":84,"column":9,"nodeType":"140","messageId":"141","endLine":84,"endColumn":15},{"ruleId":"147","severity":1,"message":"154","line":113,"column":6,"nodeType":"149","endLine":113,"endColumn":8,"suggestions":"155"},{"ruleId":"138","severity":1,"message":"156","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":21},{"ruleId":"138","severity":1,"message":"157","line":5,"column":8,"nodeType":"140","messageId":"141","endLine":5,"endColumn":26},{"ruleId":"138","severity":1,"message":"158","line":24,"column":9,"nodeType":"140","messageId":"141","endLine":24,"endColumn":12},{"ruleId":"159","severity":1,"message":"160","line":92,"column":7,"nodeType":"161","endLine":92,"endColumn":33},{"ruleId":"162","severity":1,"message":"163","line":105,"column":19,"nodeType":"161","endLine":105,"endColumn":47},{"ruleId":"164","severity":1,"message":"165","line":112,"column":13,"nodeType":"161","endLine":112,"endColumn":39},{"ruleId":"159","severity":1,"message":"160","line":112,"column":13,"nodeType":"161","endLine":112,"endColumn":39},{"ruleId":"166","severity":1,"message":"167","line":142,"column":13,"nodeType":"161","endLine":142,"endColumn":62},{"ruleId":"147","severity":1,"message":"168","line":58,"column":5,"nodeType":"149","endLine":58,"endColumn":7,"suggestions":"169"},{"ruleId":"138","severity":1,"message":"170","line":5,"column":9,"nodeType":"140","messageId":"141","endLine":5,"endColumn":20},{"ruleId":"147","severity":1,"message":"148","line":13,"column":6,"nodeType":"149","endLine":13,"endColumn":8,"suggestions":"171"},"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","no-native-reassign",["172"],"no-negated-in-lhs",["173"],"'PrivateRoute' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.","ArrayExpression",["174"],"'checked' is assigned a value but never used.",["175"],"'formik' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions' and 'formik'. Either include them or remove the dependency array.",["176"],"'pantrycartoon' is defined but never used.","'SearchRecipeButton' is defined but never used.","'img' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'actions' and 'history'. Either include them or remove the dependency array.",["177"],"'getUsername' is defined but never used.",["178"],"no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},{"desc":"179","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"179","fix":"186"},"Update the dependencies array to be: [actions]",{"range":"187","text":"188"},{"range":"189","text":"188"},"Update the dependencies array to be: [actions, formik]",{"range":"190","text":"191"},"Update the dependencies array to be: [actions, history]",{"range":"192","text":"193"},{"range":"194","text":"188"},[2147,2149],"[actions]",[2575,2577],[3280,3282],"[actions, formik]",[2175,2177],"[actions, history]",[534,536]]