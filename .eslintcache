[{"/Users/Adrienne/Desktop/MERN/mern-client/src/index.js":"1","/Users/Adrienne/Desktop/MERN/mern-client/src/reportWebVitals.js":"2","/Users/Adrienne/Desktop/MERN/mern-client/src/App.js":"3","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers.js":"4","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/404.js":"5","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/index.js":"6","/Users/Adrienne/Desktop/MERN/mern-client/src/components/userSettings/index.js":"7","/Users/Adrienne/Desktop/MERN/mern-client/src/components/home/index.js":"8","/Users/Adrienne/Desktop/MERN/mern-client/src/components/nav/index.js":"9","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/login/index.js":"10","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/modals/index.js":"11","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/list.js":"12","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/searchButton.js":"13","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/logo.js":"14","/Users/Adrienne/Desktop/MERN/mern-client/src/components/AuthenticationModal/index.js":"15","/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js":"16","/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js":"17","/Users/Adrienne/Desktop/MERN/mern-client/src/config/api.js":"18"},{"size":965,"mtime":1608539696549,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1607645433153,"results":"21","hashOfConfig":"20"},{"size":3413,"mtime":1608539696539,"results":"22","hashOfConfig":"20"},{"size":197,"mtime":1608539696550,"results":"23","hashOfConfig":"20"},{"size":340,"mtime":1608539696545,"results":"24","hashOfConfig":"20"},{"size":1562,"mtime":1608539696544,"results":"25","hashOfConfig":"20"},{"size":4056,"mtime":1607645433150,"results":"26","hashOfConfig":"20"},{"size":1750,"mtime":1608539696541,"results":"27","hashOfConfig":"20"},{"size":4205,"mtime":1608592749140,"results":"28","hashOfConfig":"20"},{"size":481,"mtime":1608539696551,"results":"29","hashOfConfig":"20"},{"size":459,"mtime":1608592749143,"results":"30","hashOfConfig":"20"},{"size":210,"mtime":1608539696544,"results":"31","hashOfConfig":"20"},{"size":274,"mtime":1607984016726,"results":"32","hashOfConfig":"20"},{"size":270,"mtime":1608539696545,"results":"33","hashOfConfig":"20"},{"size":1507,"mtime":1607984016723,"results":"34","hashOfConfig":"20"},{"size":2907,"mtime":1608592749139,"results":"35","hashOfConfig":"20"},{"size":4123,"mtime":1608592749141,"results":"36","hashOfConfig":"20"},{"size":201,"mtime":1608539696548,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"11ehr9m",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/Users/Adrienne/Desktop/MERN/mern-client/src/index.js",["83"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\n// const store = createStore(rootReducer);\n\nconst store = createStore(\n  rootReducer /* preloadedState, */,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nconsole.log(\"STORE\", store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nconsole.log(\"INDEX JS STORE\", store.getState());\n\nexport default store;\n",["84","85"],"/Users/Adrienne/Desktop/MERN/mern-client/src/reportWebVitals.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/App.js",["86","87"],"import { connect } from \"react-redux\";\nimport React, { Fragment } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport UserSettings from \"./components/userSettings\";\nimport Preferences from \"./components/preferences\";\nimport NotFound from \"./components/resuables/404\";\nimport Nav from \"./components/nav\";\n// import \"./App.css\";\n// import Modal from \"react-modal\";\n// import styles from \"./components/styles/app.module.css\";\n// import AuthenticationModal from \"./components/AuthenticationModal\";\nimport store from \"./index\";\nimport Home from \"./components/home\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst App = ({ actions, userLoggedIn }) => {\n  // const { setModalOpen } = actions;\n  return (\n    <Fragment>\n      <Helmet>\n        <title>FridgeMate</title>\n        <meta name=\"description\" content=\"Helmet application\" />\n      </Helmet>\n      <CssBaseline />\n      <BrowserRouter>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route\n            exact\n            path=\"/user/:username/preferences\"\n            component={Preferences}\n          />\n          <Route\n            exact\n            path=\"/user/:username/account-settings\"\n            component={UserSettings}\n          />\n          {/*\n            <Route exact path=\"/ingredients/:username/fridge\" component={fridge} />\n            <Route exact path=\"/ingredients/:username/pantry\" component={pantry} />\n            <Route exact path=\"/recipes/browse\" component={browseRecipes} />\n            <Route exact path=\"/recipes/single-recipe\" component={singleRecipe} />\n            <Route exact path=\"/recipes/saved-recipes\" component={userSavedRecipe} />\n            */}\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      store.dispatch({ type: \"openModal\", payload: modalId });\n      console.log(\"APP JS STORE\", store.getState());\n    },\n  },\n});\n\nexport default connect(mapStateToProps)(App);\n//\n\n// routes for later\n\n// HOME\n// /\n\n// SIGN IN PAGE\n// user/login\n\n// REGISTER PAGE\n// user/register\n\n// ACCOUNT SETTINGS PAGE\n// user/:username/account-settings\n\n// PREFRENCES PAGE\n// preferences/:username\n\n// FRIDGE PAGE\n// ingredients/:username/fridge\n\n// PANTRY PAGE\n// ingredients/:username/pantry\n\n// BROWSE RECIPE PAGE\n// /recipes/browse\n\n// SINGLE RECIPE\n// /recipes/:recipe-name\n\n// USER SAVED RECIPES\n// /saved-recipes/:username\n\n// also You need to add the massive ingredient JSON to your client repo when you do the autocmplete haha. If you pull the latest from server then you can move the file to a data file in the client :)\n// https://material-ui.com/components/autocomplete/\n\n// user: {\n//   fridgeIngredients: [Array],\n//   pantryIngredients: [Array],\n//   _id: '5fd0136d3d8569a20f8504b0',\n//   name: 'Test User 1',\n//   email: 'tester@test.com',\n//   username: 'testusername',\n//   password: '$2a$10$n7gAww9x3nTlZFYQQ25zHuu4S8ix6U44akrTo7pP5GlqOba6bOWtK',\n//   createdDate: '2020-12-08T23:59:41.384Z',\n//   lastLogin: '2020-12-08T23:59:41.384Z',\n//   __v: 0,\n//   profile: 'https://fridgemate.s3.ap-southeast-2.amazonaws.com/1607471981565'\n//   }\n","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/404.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/index.js",["88"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Formik, Field, Form } from \"formik\";\nimport preferencesList from \"./list\";\n\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\nconst mappedValues = preferencesList.map((preference) => [preference, false]);\n\nconst Preferences = () => (\n  <div>\n    <h1>User Preferences</h1>\n    <Formik\n      initialValues={Object.fromEntries(mappedValues)}\n      onSubmit={async (values) => {\n        await sleep(500);\n        // actions.submit;\n        //needs to submit to database first, then need to update local state from database. Load on log in?? Can be slower but I don't think users can really doing anything else - they'll need the data immediately..\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ values }) => {\n        return (\n          <Form>\n            {preferencesList.map((preference, index) => (\n              <label key={index}>\n                <Field type=\"checkbox\" name={preference} />\n                {preference}\n              </label>\n            ))}\n            {/* what was the name of your preference name tag on the checkbox? Preferences? plural? */}\n            {/* so the reqest will be req.body.preference ? */}\n            <button type=\"submit\">Submit</button>\n          </Form>\n        );\n      }}\n    </Formik>\n  </div>\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    submit: () => dispatch({ type: \"submit\" }),\n  },\n});\n\nReactDOM.render(<Preferences />, document.getElementById(\"root\"));\n\nexport default Preferences;\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/userSettings/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/home/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/nav/index.js",["89","90","91","92","93","94"],"import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SearchRecipeButton from \"../resuables/searchButton\";\nimport styles from \"../styles/sideNav.module.css\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\nimport AuthenticationModal from \"../AuthenticationModal\";\n\n//IMAGES-icons\nimport fridge from \"../styles/imgs/fridge.png\";\nimport pantry from \"../styles/imgs/pantry.png\";\nimport pref from \"../styles/imgs/preference.png\";\nimport list from \"../styles/imgs/list.png\";\n\n//FOOD IMAGES\nimport carrot from \"../styles/imgs/carrot.png\";\nimport chilli from \"../styles/imgs/chilli.png\";\nimport corn from \"../styles/imgs/corn.png\";\nimport egg from \"../styles/imgs/egg.png\";\nimport garlic from \"../styles/imgs/garlic.png\";\nimport radish from \"../styles/imgs/radish.png\";\nimport ramen from \"../styles/imgs/ramen.png\";\nimport tomato from \"../styles/imgs/tomato.png\";\n\nconst navBar = ({ actions, userLoggedIn }) => {\n  const { setModalOpen } = actions;\n  const listFoodImg = [\n    carrot,\n    chilli,\n    corn,\n    egg,\n    garlic,\n    radish,\n    ramen,\n    tomato,\n  ];\n  let randomFoodImg =\n    listFoodImg[Math.floor(Math.random() * listFoodImg.length)];\n\n  return (\n    <div class={styles.navBox}>\n      <AuthenticationModal />\n      <a class={styles.trigger}>\n        <i>\n          <MoreVertIcon />\n        </i>\n      </a>\n      <nav class={styles.nav}>\n        <ul>\n          <li>\n            <Link to={`/user/${userLoggedIn}/account-settings`}>\n              <div class={styles.userProfile}>\n                <img alt=\"Users profile image\" src={fridge} />\n                <div>User's Name</div>\n              </div>\n            </Link>\n          </li>\n\n          <li>\n            {\" \"}\n            <SearchRecipeButton />\n            <a class={styles.navLink}></a>\n          </li>\n          <li>\n            <Link\n              to={`/ingredients/ ${userLoggedIn}/fridge`}\n              class={styles.navLink}\n            >\n              <img alt=\"Fridge\" src={fridge} />\n              <div>My Fridge</div>\n            </Link>\n          </li>\n          <li>\n            <Link\n              to={`/ingredients/ ${userLoggedIn}/fridge`}\n              class={styles.navLink}\n            >\n              <img alt=\"Pantry\" src={pantry} />\n              <div>Pantry Staples</div>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/recipes/saved-recipes\" class={styles.navLink}>\n              <img alt=\"list\" src={list} />\n              <div>Saved Recipes</div>\n            </Link>\n          </li>\n          <li>\n            <Link\n              to={`/user/${userLoggedIn}/preferences`}\n              class={styles.navLink}\n            >\n              <img alt=\"preference\" src={pref} />\n              <div> My Preferences</div>\n            </Link>\n          </li>\n          <li class={styles.foodPic}>\n            <img alt=\"picture of food\" src={randomFoodImg} />\n          </li>\n          <li class={styles.navButtons}>\n            <Fragment>\n              {userLoggedIn ? (\n                <Fragment>\n                  {\" \"}\n                  <button\n                    class={styles.loginSignupButtons}\n                    onClick={actions.logout}\n                  >\n                    Log out\n                  </button>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <button onClick={() => setModalOpen(\"login\")}>Login</button>\n                  <button onClick={() => setModalOpen(\"register\")}>\n                    Register\n                  </button>\n                </Fragment>\n              )}\n            </Fragment>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n    logIn: () => dispatch({ type: \"login\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\n// export default navBar;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(navBar);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/login/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/modals/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/list.js",["95"],"import React from \"react\";\n\nconst preferencesList = [\n  \"vegetarian\",\n  \"vegan\",\n  \"glutenFree\",\n  \"dairyFree\",\n  \"veryHealthy\",\n  \"cheap\",\n  \"veryPopular\",\n  \"sustainable\",\n];\n\nexport default preferencesList;\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/searchButton.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/logo.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/AuthenticationModal/index.js",["96"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\nimport Login from \"../login\";\nimport Register from \"../register\";\n\nconst AuthenticationModal = ({ actions, modalId }) => {\n  const { closeModal, openModal } = actions;\n\n  const logInRegisterModals = {\n    register: <Register />,\n    login: <Login />,\n  };\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n\n  return (\n    <Modal\n      isOpen={typeof modalId === \"string\"}\n      onRequestClose={closeModal}\n      style={customStyles}\n      ariaHideApp={false}\n      contentLabel=\"Log In\"\n    >\n      {modalId && logInRegisterModals[modalId]}\n      <button class=\"modalLoginButton\" onClick={() => openModal(\"login\")}>\n        Login\n      </button>\n      <button class=\"modalRegisterButton\" onClick={() => openModal(\"register\")}>\n        Register\n      </button>\n      <button class=\"modalCancelButton\" onClick={closeModal}>\n        Cancel\n      </button>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  modalId: state.modalOpen.modal,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    openModal: (modalId) => dispatch({ type: \"openModal\", payload: modalId }),\n    closeModal: () => dispatch({ type: \"closeModal\" }),\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuthenticationModal);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js",["97"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport styles from \"../styles/loginSignup.module.css\";\nimport store from \"../../index\";\nimport api from \"../../config/api\";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  }\n  return errors;\n};\n\nconst Login = ({ actions, loggedIn }) => {\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    validate,\n\n    onSubmit: async (values) => {\n      try {\n        await api\n          .post(\"/auth/login\", { ...values })\n          .then(() => actions.logIn());\n      } catch (error) {\n        console.log(\"login err\", JSON.parse(JSON.stringify(error)));\n        formik.setStatus(JSON.parse(JSON.stringify(error)).message);\n      }\n    },\n  });\n\n  return (\n    <div class={styles.loginSignupBox}>\n      <h1>Login</h1>\n      <form onSubmit={formik.handleSubmit}>\n        <label htmlFor=\"email\">Email </label>\n        {formik.status && (\n          <div>Error: {formik.status}. Please try signing in again.</div>\n        )}\n        <input\n          id=\"loginEmail\"\n          name=\"email\"\n          type=\"email\"\n          class=\"loginEmail\"\n          placeholder=\"Email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n        {formik.touched.email && formik.errors.email ? (\n          <div>{formik.errors.email}</div>\n        ) : null}\n        <label htmlFor=\"password\">Password</label>\n        <input\n          id=\"loginPassword\"\n          name=\"password\"\n          type=\"password\"\n          class=\"loginPassword\"\n          placeholder=\"Enter Password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n        {formik.touched.password && formik.errors.password ? (\n          <div>{formik.errors.password}</div>\n        ) : null}\n        <div>\n          <button\n            class={styles.loginSignupButtons}\n            type=\"submit\"\n            onClick={formik.handleSubmit}\n          >\n            Log In\n          </button>\n          <button class={styles.loginSignupButtons} onClick={actions.logout}>\n            Log out\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    logIn: ({ email, password }) =>\n      dispatch({ type: \"login\", payload: { email, password } }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js",["98"],"import React from \"react\";\n\nimport { useFormik } from \"formik\";\nimport styles from \"../styles/loginSignup.module.css\";\nimport api from \"../../config/api\";\nimport { CallToActionSharp } from \"@material-ui/icons\";\nimport { connect } from \"react-redux\";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.password\n    )\n  ) {\n    errors.password =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n    // I feel like we don't need this twice??\n    // } else if (\n    //   !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n    //     values.confirmPassword\n    //   )\n    // ) {\n    //   errors.confirmPassword =\n    //     \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match.\";\n  }\n\n  return errors;\n};\n\nconst Register = ({ actions, registerd }) => {\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n\n      password: \"\",\n\n      confirmPassword: \"\",\n    },\n\n    validate,\n\n    onSubmit: async (values) => {\n      try {\n        await api\n          .post(\"/auth/register\", { ...values })\n          .then(() => actions.register());\n      } catch (error) {\n        console.log(\"register err\", JSON.parse(JSON.stringify(error)));\n        formik.setStatus(JSON.parse(JSON.stringify(error)).message);\n      }\n    },\n  });\n\n  return (\n    <div class={styles.loginSignupBox}>\n      <h1>Sign Up</h1>\n      <form onSubmit={formik.handleSubmit}>\n        <label htmlFor=\"email\">Email Address</label>\n\n        {formik.status && (\n          <div>Error: {formik.status}. Please try registering in again.</div>\n        )}\n\n        <input\n          id=\"registerEmail\"\n          class=\"registerEmail\"\n          name=\"email\"\n          type=\"email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n\n        {formik.touched.email && formik.errors.email ? (\n          <div>{formik.errors.email}</div>\n        ) : null}\n\n        <label htmlFor=\"password\">Password</label>\n\n        <input\n          id=\"registerPassword\"\n          class=\"registerPassword\"\n          name=\"password\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n\n        {formik.touched.password && formik.errors.password ? (\n          <div>{formik.errors.password}</div>\n        ) : null}\n\n        <label htmlFor=\"confirmPassword\">Confirm Password</label>\n\n        <input\n          id=\"registerConfirmPassword\"\n          class=\"registerConfirmPassword\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.confirmPassword}\n        />\n\n        {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n          <div>{formik.errors.confirmPassword}</div>\n        ) : null}\n        <div>\n          <button\n            class={styles.loginSignupButtons}\n            type=\"submit\"\n            onClick={formik.handleSubmit}\n          >\n            Sign Up\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  registered: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    register: ({ email, password }) =>\n      dispatch({ type: \"register\", payload: { email, password } }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/config/api.js",[],{"ruleId":"99","severity":1,"message":"100","line":6,"column":23,"nodeType":"101","messageId":"102","endLine":6,"endColumn":30},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"99","severity":1,"message":"107","line":4,"column":40,"nodeType":"101","messageId":"102","endLine":4,"endColumn":44},{"ruleId":"99","severity":1,"message":"108","line":59,"column":7,"nodeType":"101","messageId":"102","endLine":59,"endColumn":25},{"ruleId":"99","severity":1,"message":"108","line":41,"column":7,"nodeType":"101","messageId":"102","endLine":41,"endColumn":25},{"ruleId":"99","severity":1,"message":"109","line":7,"column":8,"nodeType":"101","messageId":"102","endLine":7,"endColumn":13},{"ruleId":"110","severity":1,"message":"111","line":44,"column":7,"nodeType":"112","endLine":44,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":54,"column":17,"nodeType":"112","endLine":54,"endColumn":63},{"ruleId":"115","severity":1,"message":"116","line":63,"column":13,"nodeType":"112","endLine":63,"endColumn":39},{"ruleId":"110","severity":1,"message":"111","line":63,"column":13,"nodeType":"112","endLine":63,"endColumn":39},{"ruleId":"113","severity":1,"message":"114","line":90,"column":13,"nodeType":"112","endLine":90,"endColumn":62},{"ruleId":"99","severity":1,"message":"117","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":13},{"ruleId":"99","severity":1,"message":"118","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"119","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":13},{"ruleId":"99","severity":1,"message":"120","line":6,"column":10,"nodeType":"101","messageId":"102","endLine":6,"endColumn":27},"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"'Link' is defined but never used.","'mapDispatchToProps' is assigned a value but never used.","'Modal' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'React' is defined but never used.","'useState' is defined but never used.","'store' is defined but never used.","'CallToActionSharp' is defined but never used.","no-global-assign","no-unsafe-negation"]