[{"/Users/Adrienne/Desktop/MERN/mern-client/src/reportWebVitals.js":"1","/Users/Adrienne/Desktop/MERN/mern-client/src/index.js":"2","/Users/Adrienne/Desktop/MERN/mern-client/src/App.js":"3","/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js":"4","/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js":"5","/Users/Adrienne/Desktop/MERN/mern-client/src/components/userSettings/index.js":"6","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/index.js":"7","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers.js":"8","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/login/index.js":"9","/Users/Adrienne/Desktop/MERN/mern-client/src/components/nav/index.js":"10","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/searchButton.js":"11","/Users/Adrienne/Desktop/MERN/mern-client/src/components/AuthenticationModal/index.js":"12","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/modals/index.js":"13","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/list.js":"14"},{"size":362,"mtime":1607645433153,"results":"15","hashOfConfig":"16"},{"size":965,"mtime":1608031323877,"results":"17","hashOfConfig":"16"},{"size":3162,"mtime":1608030383683,"results":"18","hashOfConfig":"16"},{"size":2602,"mtime":1608027047780,"results":"19","hashOfConfig":"16"},{"size":3192,"mtime":1607984016725,"results":"20","hashOfConfig":"16"},{"size":4056,"mtime":1607645433150,"results":"21","hashOfConfig":"16"},{"size":1525,"mtime":1607993550738,"results":"22","hashOfConfig":"16"},{"size":197,"mtime":1608027796306,"results":"23","hashOfConfig":"16"},{"size":540,"mtime":1608027619577,"results":"24","hashOfConfig":"16"},{"size":4192,"mtime":1607984016725,"results":"25","hashOfConfig":"16"},{"size":274,"mtime":1607984016726,"results":"26","hashOfConfig":"16"},{"size":1507,"mtime":1607984016723,"results":"27","hashOfConfig":"16"},{"size":489,"mtime":1607984017525,"results":"28","hashOfConfig":"16"},{"size":321,"mtime":1607993522498,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"11ehr9m",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/Adrienne/Desktop/MERN/mern-client/src/reportWebVitals.js",[],["63","64"],"/Users/Adrienne/Desktop/MERN/mern-client/src/index.js",["65"],"/Users/Adrienne/Desktop/MERN/mern-client/src/App.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js",["66"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport styles from \"../styles/loginSignup.module.css\";\nimport store from \"../../index\";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  }\n  return errors;\n};\n\nconst Login = ({ actions, loggedIn }) => {\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    validate,\n\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n\n  return (\n    <div class={styles.loginSignupBox}>\n      <h1>Login</h1>\n      <form onSubmit={formik.handleSubmit}>\n        <label htmlFor=\"email\">Email </label>\n\n        <input\n          id=\"loginEmail\"\n          name=\"email\"\n          type=\"email\"\n          class=\"loginEmail\"\n          placeholder=\"Email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n\n        {formik.touched.email && formik.errors.email ? (\n          <div>{formik.errors.email}</div>\n        ) : null}\n\n        <label htmlFor=\"password\">Password</label>\n\n        <input\n          id=\"loginPassword\"\n          name=\"password\"\n          type=\"password\"\n          class=\"loginPassword\"\n          placeholder=\"Enter Password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n\n        {formik.touched.password && formik.errors.password ? (\n          <div>{formik.errors.password}</div>\n        ) : null}\n        <div>\n          <button\n            class={styles.loginSignupButtons}\n            type=\"submit\"\n            onClick={actions.logIn}\n          >\n            Log In\n          </button>\n          <button class={styles.loginSignupButtons} onClick={actions.logout}>\n            Log out\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => (\n  {\n    loggedIn: state.userLoggedIn.username,\n  },\n  console.log(\"TYPE COMPONENTS LOG IN JS STORE\", typeof store.getState()),\n  console.log(\"COMPONENTS LOG IN JS STORE\", store.getState())\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    logIn: () => dispatch({ type: \"login\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/userSettings/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/login/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/nav/index.js",["67","68","69","70","71","72","73"],"import React, { Fragment } from \"react\";\nimport SearchRecipeButton from \"../resuables/searchButton\";\nimport Login from \"../login\";\nimport Register from \"../register\";\nimport styles from \"../styles/sideNav.module.css\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\nimport AuthenticationModal from \"../AuthenticationModal\";\n\n//IMAGES-icons\nimport fridge from \"../styles/imgs/fridge.png\";\nimport pantry from \"../styles/imgs/pantry.png\";\nimport pref from \"../styles/imgs/preference.png\";\nimport list from \"../styles/imgs/list.png\";\n\n//FOOD IMAGES\nimport carrot from \"../styles/imgs/carrot.png\";\nimport chilli from \"../styles/imgs/chilli.png\";\nimport corn from \"../styles/imgs/corn.png\";\nimport egg from \"../styles/imgs/egg.png\";\nimport garlic from \"../styles/imgs/garlic.png\";\nimport radish from \"../styles/imgs/radish.png\";\nimport ramen from \"../styles/imgs/ramen.png\";\nimport tomato from \"../styles/imgs/tomato.png\";\n\nconst navBar = ({ actions, userLoggedIn }) => {\n  const { setModalOpen } = actions;\n  const listFoodImg = [\n    carrot,\n    chilli,\n    corn,\n    egg,\n    garlic,\n    radish,\n    ramen,\n    tomato,\n  ];\n  let randomFoodImg =\n    listFoodImg[Math.floor(Math.random() * listFoodImg.length)];\n\n  return (\n    <div class={styles.navBox}>\n      <AuthenticationModal />\n      <a class={styles.trigger} href=\"#0\">\n        <i>\n          <MoreVertIcon />\n        </i>\n      </a>\n      <nav class={styles.nav}>\n        <ul>\n          <li>\n            <a href=\"#0\">\n              <div class={styles.userProfile}>\n                <img alt=\"Users profile image\" src={fridge} />\n                <div>User's Name</div>\n              </div>\n            </a>\n          </li>\n\n          <li>\n            {\" \"}\n            <SearchRecipeButton />\n            <a class={styles.navLink}></a>\n          </li>\n          <li>\n            <a class={styles.navLink} href=\"#0\">\n              <img alt=\"Fridge\" src={fridge} />\n              <div>My Fridge</div>\n            </a>\n          </li>\n          <li>\n            <a class={styles.navLink} href=\"#0\">\n              <img alt=\"Pantry\" src={pantry} />\n              <div>Pantry Staples</div>\n            </a>\n          </li>\n          <li>\n            <a class={styles.navLink} href=\"#0\">\n              <img alt=\"list\" src={list} />\n              <div>Saved Recipes</div>\n            </a>\n          </li>\n          <li>\n            <a class={styles.navLink} href=\"#0\">\n              <img alt=\"preference\" src={pref} />\n              <div> My Preferences</div>\n            </a>\n          </li>\n          <li class={styles.foodPic}>\n            <img alt=\"picture of food\" src={randomFoodImg} />\n          </li>\n          <li class={styles.navButtons}>\n            <Fragment>\n              {userLoggedIn ? (\n                <Fragment>\n                  {\" \"}\n                  <button\n                    class={styles.loginSignupButtons}\n                    onClick={actions.logout}\n                  >\n                    Log out\n                  </button>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <button onClick={() => setModalOpen(\"login\")}>Login</button>\n                  <button onClick={() => setModalOpen(\"register\")}>\n                    Register\n                  </button>\n                </Fragment>\n              )}\n              <button\n                class={styles.loginSignupButtons}\n                onClick={actions.logout}\n              >\n                {userLoggedIn ? <Fragment>1</Fragment> : <Fragment>2</Fragment>}\n                LOG OUT\n              </button>\n            </Fragment>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n    logIn: () => dispatch({ type: \"login\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\n// export default navBar;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(navBar);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resuables/searchButton.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/AuthenticationModal/index.js",["74"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\nimport Login from \"../login\";\nimport Register from \"../register\";\n\nconst AuthenticationModal = ({ actions, modalId }) => {\n  const { closeModal, openModal } = actions;\n\n  const logInRegisterModals = {\n    register: <Register />,\n    login: <Login />,\n  };\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n\n  return (\n    <Modal\n      isOpen={typeof modalId === \"string\"}\n      onRequestClose={closeModal}\n      style={customStyles}\n      ariaHideApp={false}\n      contentLabel=\"Log In\"\n    >\n      {modalId && logInRegisterModals[modalId]}\n      <button class=\"modalLoginButton\" onClick={() => openModal(\"login\")}>\n        Login\n      </button>\n      <button class=\"modalRegisterButton\" onClick={() => openModal(\"register\")}>\n        Register\n      </button>\n      <button class=\"modalCancelButton\" onClick={closeModal}>\n        Cancel\n      </button>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  modalId: state.modalOpen.modal,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    openModal: (modalId) => dispatch({ type: \"openModal\", payload: modalId }),\n    closeModal: () => dispatch({ type: \"closeModal\" }),\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuthenticationModal);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/modals/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/list.js",["75"],"import React from \"react\";\n\nconst preferencesList = [\n  \"vegetarian\",\n  \"gluten free\",\n  \"ketogenic\",\n  \"vegan\",\n  \"pescetarian\",\n  \"paleo\",\n  \"dairy\",\n  \"egg\",\n  \"gluten\",\n  \"grain\",\n  \"peanut\",\n  \"seafood\",\n  \"sesame\",\n  \"shellfish\",\n  \"soy\",\n  \"sulphite\",\n  \"tree nuts\",\n  \"wheat\",\n];\n\nexport default preferencesList;\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":6,"column":23,"nodeType":"82","messageId":"83","endLine":6,"endColumn":30},{"ruleId":"84","severity":1,"message":"85","line":92,"column":4,"nodeType":"86","messageId":"87","endLine":92,"endColumn":5},{"ruleId":"80","severity":1,"message":"88","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13},{"ruleId":"80","severity":1,"message":"89","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":16},{"ruleId":"80","severity":1,"message":"90","line":8,"column":8,"nodeType":"82","messageId":"83","endLine":8,"endColumn":13},{"ruleId":"91","severity":1,"message":"92","line":55,"column":17,"nodeType":"93","endLine":55,"endColumn":63},{"ruleId":"94","severity":1,"message":"95","line":64,"column":13,"nodeType":"93","endLine":64,"endColumn":39},{"ruleId":"96","severity":1,"message":"97","line":64,"column":13,"nodeType":"93","endLine":64,"endColumn":39},{"ruleId":"91","severity":1,"message":"92","line":91,"column":13,"nodeType":"93","endLine":91,"endColumn":62},{"ruleId":"80","severity":1,"message":"98","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"99","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":13},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Login' is defined but never used.","'Register' is defined but never used.","'Modal' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]