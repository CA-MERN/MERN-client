[{"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/index.js":"1","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reportWebVitals.js":"2","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers.js":"3","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/App.js":"4","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/authServices.js":"5","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/modals/index.js":"6","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/userInfo/index.js":"7","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/login/index.js":"8","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/recipes/index.js":"9","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/errors/index.js":"10","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/preferences/index.js":"11","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/ingredients/index.js":"12","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/userSettings/index.js":"13","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/savedRecipes/index.js":"14","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/nav/index.js":"15","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/index.js":"16","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/singleRecipe/index.js":"17","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/footer/index.js":"18","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/home/index.js":"19","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/notFound/index.js":"20","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/fridge/index.js":"21","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/pantry/index.js":"22","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/resetPassword/index.js":"23","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/config/api.js":"24","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/browseRecipes/index.js":"25","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/styles/makeStyles.js":"26","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/ingredientServices.js":"27","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/recipeServices.js":"28","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/logo/index.js":"29","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/profileImage/index.js":"30","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/loading/index.js":"31","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/searchButton/index.js":"32","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/noItemsPage/index.js":"33","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/ingredientAutocomplete/index.js":"34","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/ingredient/index.js":"35","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/list.js":"36","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/data/testSaveRecipeData.js":"37","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/listedRecipe/index.js":"38","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/carousel/index.js":"39","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/AuthenticationModal/index.js":"40","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/register/index.js":"41","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/login/index.js":"42","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/help/index.js":"43","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/forgotPassword/index.js":"44","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/store.js":"45"},{"size":664,"mtime":1611008912388,"results":"46","hashOfConfig":"47"},{"size":362,"mtime":1607657595793,"results":"48","hashOfConfig":"47"},{"size":523,"mtime":1610526660479,"results":"49","hashOfConfig":"47"},{"size":3894,"mtime":1611009114421,"results":"50","hashOfConfig":"47"},{"size":4692,"mtime":1611008912451,"results":"51","hashOfConfig":"47"},{"size":459,"mtime":1608640525396,"results":"52","hashOfConfig":"47"},{"size":1008,"mtime":1610526660486,"results":"53","hashOfConfig":"47"},{"size":1027,"mtime":1610526660482,"results":"54","hashOfConfig":"47"},{"size":1057,"mtime":1610526660484,"results":"55","hashOfConfig":"47"},{"size":418,"mtime":1610526660480,"results":"56","hashOfConfig":"47"},{"size":818,"mtime":1610526660483,"results":"57","hashOfConfig":"47"},{"size":1131,"mtime":1610526660481,"results":"58","hashOfConfig":"47"},{"size":9906,"mtime":1610966937136,"results":"59","hashOfConfig":"47"},{"size":5740,"mtime":1610966937134,"results":"60","hashOfConfig":"47"},{"size":6526,"mtime":1610966937130,"results":"61","hashOfConfig":"47"},{"size":6861,"mtime":1611008912387,"results":"62","hashOfConfig":"47"},{"size":8641,"mtime":1611005074658,"results":"63","hashOfConfig":"47"},{"size":218,"mtime":1611008912382,"results":"64","hashOfConfig":"47"},{"size":1750,"mtime":1610966937126,"results":"65","hashOfConfig":"47"},{"size":1401,"mtime":1610526660187,"results":"66","hashOfConfig":"47"},{"size":5536,"mtime":1611010132588,"results":"67","hashOfConfig":"47"},{"size":5686,"mtime":1611006442234,"results":"68","hashOfConfig":"47"},{"size":6804,"mtime":1610966937133,"results":"69","hashOfConfig":"47"},{"size":379,"mtime":1610966937137,"results":"70","hashOfConfig":"47"},{"size":7362,"mtime":1611004709957,"results":"71","hashOfConfig":"47"},{"size":385,"mtime":1610526660470,"results":"72","hashOfConfig":"47"},{"size":2246,"mtime":1610854599995,"results":"73","hashOfConfig":"47"},{"size":1961,"mtime":1610526660490,"results":"74","hashOfConfig":"47"},{"size":327,"mtime":1610526660176,"results":"75","hashOfConfig":"47"},{"size":2885,"mtime":1611008912387,"results":"76","hashOfConfig":"47"},{"size":400,"mtime":1610526660170,"results":"77","hashOfConfig":"47"},{"size":1082,"mtime":1610854599987,"results":"78","hashOfConfig":"47"},{"size":1402,"mtime":1610526660184,"results":"79","hashOfConfig":"47"},{"size":5942,"mtime":1611008912384,"results":"80","hashOfConfig":"47"},{"size":4384,"mtime":1610966937127,"results":"81","hashOfConfig":"47"},{"size":353,"mtime":1610526660201,"results":"82","hashOfConfig":"47"},{"size":626,"mtime":1610526660477,"results":"83","hashOfConfig":"84"},{"size":5544,"mtime":1610966937128,"results":"85","hashOfConfig":"47"},{"size":3958,"mtime":1611008912381,"results":"86","hashOfConfig":"47"},{"size":1389,"mtime":1611008912380,"results":"87","hashOfConfig":"47"},{"size":7586,"mtime":1610966937132,"results":"88","hashOfConfig":"47"},{"size":5470,"mtime":1611009205510,"results":"89","hashOfConfig":"47"},{"size":4197,"mtime":1611008912383,"results":"90","hashOfConfig":"47"},{"size":4245,"mtime":1611008912383,"results":"91","hashOfConfig":"47"},{"size":245,"mtime":1611008912389,"results":"92","hashOfConfig":"47"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"qgu1bu",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"95"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"95"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"95"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"95"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"95"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"95"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"95"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},"8oth7u",{"filePath":"179","messages":"180","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"95"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"95"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/index.js",[],["197","198"],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reportWebVitals.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/App.js",["199"],"import { connect } from \"react-redux\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport {\n  //setLoggedInUser,\n  //getLoggedInUser,\n  getUsername,\n  setUsername,\n} from \"./services/authServices\";\n\nimport { ToastContainer } from \"react-toastify\";\n\nimport UserSettings from \"./components/userSettings\";\nimport Preferences from \"./components/preferences\";\nimport BrowseRecipes from \"./components/browseRecipes\";\nimport SavedRecipes from \"./components/savedRecipes\";\nimport SingleRecipe from \"./components/singleRecipe\";\nimport ResetPassword from \"./components/resetPassword\";\nimport NotFound from \"./components/notFound\";\nimport Nav from \"./components/nav\";\nimport Home from \"./components/home\";\nimport Fridge from \"./components/fridge\";\nimport Pantry from \"./components/pantry\";\nimport Footer from \"./components/footer\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n\n//NOTE TO CHANGE THE BELOW ROUTES BACK TO PRIVATE ROUTE AFTER ALL CODE IS DONE\n//MAYBE ADD TOAST NOTIFCATION BELOW?\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const isLoggedIn = getUsername();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLoggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n        )\n      }\n    />\n  );\n};\n\nconst App = ({ actions }) => {\n  \n\n    useEffect(( ) => {\n        try {\n          actions.logIn(getUsername());\n          //actions.getToken(getLoggedInUser());\n        } catch (error) {\n          console.log(\"got an error trying to check authenticated user:\", error);\n          //setLoggedInUser();\n          setUsername();\n          actions.logout();\n        }\n        // return a function that specifies any actions on component unmount\n        return () => {};\n      }, []);\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>FridgeMate</title>\n        <meta name=\"description\" content=\"Helmet application\" />\n      </Helmet>\n      <CssBaseline />\n      <BrowserRouter>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <PrivateRoute\n            exact\n            path=\"/preferences/:username\"\n            component={Preferences}\n          />\n          <PrivateRoute\n            exact\n            path=\"/user/:username/account-settings\"\n            component={UserSettings}\n          />\n          <PrivateRoute\n            exact\n            path=\"/ingredients/:username/fridge\"\n            component={Fridge}\n          />\n          <PrivateRoute\n            exact\n            path=\"/recipes/browse\"\n            component={BrowseRecipes}\n          />\n          <PrivateRoute\n            exact\n            path=\"/recipes/:id/recipe\"\n            component={SingleRecipe}\n          />\n          <PrivateRoute\n            exact\n            path=\"/recipes/saved-recipes\"\n            component={SavedRecipes}\n          />\n          <PrivateRoute\n            exact\n            path=\"/ingredients/:username/pantry\"\n            component={Pantry}\n          />\n          <Route\n            exact\n            path=\"/user/reset-password/:token\"\n            component={ResetPassword}\n          />\n          <Route component={NotFound} />\n        </Switch>\n        <ToastContainer />\n      </BrowserRouter>\n      <Footer />\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    logIn: (username) => dispatch({ type: \"login\", payload: username }),\n    getToken: (jwt) => dispatch({ type: \"token\", payload: jwt }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport { App as AppForTest };\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/authServices.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/modals/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/userInfo/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/login/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/recipes/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/errors/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/preferences/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/reducers/ingredients/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/userSettings/index.js",["200"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./userSettings.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport {\n  getUserSettings,\n  updateUserSettings,\n  getUsername,\n  setUsername,\n  setProfile,\n} from \"../../services/authServices\";\n\nimport ProfileImage from \"../profileImage\";\nimport Logo from \"../logo\";\nimport Loading from \"../loading\";\n\nimport ProfileDefault from \"../styles/imgs/profileDefault.png\";\n\nimport Fade from 'react-reveal/Fade';\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from '@material-ui/core/Fade';\n\nimport {toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.username) {\n    errors.username = \"Required\";\n  } else if (values.username.length > 15) {\n    errors.username = \"Must be 15 characters or less\";\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.password\n    )\n  ) {\n    errors.password =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.confirmPassword\n    )\n  ) {\n    errors.confirmPassword =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match.\";\n  }\n\n  return errors;\n};\n\nconst UserSettings = ({ actions, currentUserSettings, userLoggedIn }) => {\n  const classes = useStyles();\n  const [loading, setloading] = useState({ done: false });\n  const text = {\n      color: 'red',\n      marginLeft: \"10px\"\n    }; \n\n\n let history = useHistory();\n  useEffect(() => {\n    getUserSettings(getUsername())\n      .then((user) => {\n        actions.settings(user);\n        actions.updateUsername(user.username);\n        setProfile(user.profile)\n        setUsername(user.username);\n      })\n      .then(() => {\n      })   \n      .catch((error) => {\n        if (error.response && error.response.status === 404)\n          formik.setStatus(\"Sorry we could not get your information at this time.\");\n        else\n          formik.setStatus(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n        setTimeout(() => {\n          setloading({ done: true })\n                }, 4000);\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n\n      email: \"\",\n\n      password: \"\",\n\n      confirmPassword: \"\",\n    },\n\n    validate,   \n\n    onSubmit: (values) => {\n      setloading({ done: false })\n      updateUserSettings({ ...values }, userLoggedIn)\n        .then((user) => {\n          actions.settings({ ...user });\n          actions.updateUsername(user.username);\n          setUsername(user.username);\n          setProfile(user.profile);\n          history.push(\"/user/\"+getUsername()+\"/account-settings\")\n          toast.success(\"User information updated!\")\n        })\n        .catch((error) => {\n           toast.error(\"Oh no, error!\")\n          if (error.response && error.response.status === 404)\n            formik.setStatus(\"Sorry we could not submit your request at this time.\");\n          else\n            formik.setStatus(\n               \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n        });\n        setTimeout(() => {\n                setloading({ done: true });\n                }, 3000)\n    },\n  });\n\n  return (\n    <div className={classes.root}>\n    <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>Account Settings</h1>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n              {!loading.done ? (\n           <Loading/>\n              ) : (  \n            <>  \n      \n            <div class={appstyles.subheading} >Update your account settings below.</div>\n\n                      <div class={styles.settingsBox}>\n                        <Fade bottom >\n                        {formik.status && <div style={text}>Error: {formik.status}. </div>}\n                        </Fade>\n                        <form onSubmit={formik.handleSubmit}>\n                          <div class={styles.profileBox}>\n                            {currentUserSettings.profile ? (\n                              <img alt=\"profile of user\"src={currentUserSettings.profile} />\n                            ) : (\n                              <img alt=\"default profile \" src={ProfileDefault} />\n                            )}\n                          </div>    \n                          <label htmlFor=\"photo\" class={styles.profileBox}>\n                            Update Profile Picture\n                          </label>\n                              <div class={styles.fileBox}>\n                                <ProfileImage />\n                              \n                              </div>\n                          <label htmlFor=\"username\">Username</label>\n\n                          <input\n                            id=\"userSettingsName\"\n                            name=\"username\"\n                            type=\"text\"\n                            placeholder={currentUserSettings.username}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.username}\n                          />\n\n                          {formik.touched.username && formik.errors.username ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.username}</div>\n                            </Fade>\n                          ) : null}\n                \n\n                          <label htmlFor=\"email\">Email Address</label>\n\n                          <input\n                            id=\"userSettingsEmail\"\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder={currentUserSettings.email}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.email}\n                          />\n\n                          {formik.touched.email && formik.errors.email ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.email}</div>\n                            </Fade>\n                          ) : null}\n\n                          <label htmlFor=\"password\">Password</label>\n\n                          <input\n                            id=\"userSettingsPassword\"\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.password}\n                          />\n\n                          {formik.touched.password && formik.errors.password ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.password}</div>\n                            </Fade>\n                          ) : null}\n\n                          <label htmlFor=\"confirmPassword\">Password</label>\n\n                          <input\n                            id=\"userSettingsConfirmPassword\"\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Retype Password\"\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            value={formik.values.confirmPassword}\n                          />\n\n                          {formik.touched.confirmPassword &&\n                          formik.errors.confirmPassword ? (\n                            <Fade bottom >\n                            <div style={text}>{formik.errors.confirmPassword}</div>\n                            </Fade>\n                          ) : null}\n\n                          <Button variant=\"contained\" class={styles.updateButton} type=\"submit\">\n                            Update Details\n                          </Button>\n                        </form>\n                    </div>\n                 \n                  </>\n                )}     \n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentUserSettings: state.currentUserSettings,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    settings: ({ email, username, profile }) =>\n      dispatch({ type: \"settings\", payload: { email, username, profile } }),\n    updateUsername: (username) =>\n      dispatch({ type: \"updateUsername\", payload: username }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettings);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/savedRecipes/index.js",["201"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport Logo from \"../logo\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\nimport styles from \"./saved.module.css\";\n\nimport { getAllUserSavedRecipes, getSavedRecipes, setSavedRecipes, removedSavedRecipe } from \"../../services/recipeServices\";\n\nimport ListedRecipe from \"../listedRecipe\";\nimport NoIngredients from \"../noItemsPage\";\nimport Loading from \"../loading\";\n\nimport list from \"../styles/imgs/list.png\";\n//MATERIAL\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from '@material-ui/core/Fade';\nimport Button from \"@material-ui/core/Button\";\n\n//import TestSaveData from \"../../data/testSaveRecipeData\";\n\nimport {toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst SavedRecipes = ({ actions, savedRecipes }) => {\n  const classes = useStyles();\n  let history = useHistory(); \n  const [errors, setErrors] = useState(null);\n  const [savedUserRecipes, setSavedUserRecipes] = useState(null);\n  const [loading, setloading] = useState({ done: false });\n\n  const checker = JSON.parse(getSavedRecipes())\n\n  //Call DB to display recipe data\n  async function getSavedHandler() {\n     setSavedRecipes()\n     setloading({ done: false });\n              await getAllUserSavedRecipes()\n                .then((res) => {\n                  setSavedRecipes()\n                  //saved to redux\n                  actions.AddToSavedRecipes(res)\n                  //save to local storage\n                  setSavedRecipes(res)\n                  setSavedUserRecipes(res)\n                  setErrors(\"\")\n                  setTimeout(() => {\n                  setloading({ done: true });\n                }, 2500);\n                  history.push(\"/recipes/saved-recipes\")\n                })\n                .catch((error) => {\n                  if (error.response && error.response.status === 401)\n                  toast.error(\"Sorry we could not get your recipes at this time.\");\n                  else\n                  toast.error( \"There may be a problem with the server. Please try again after a few moments.\");\n                  history.push(\"/recipes/saved-recipes\")\n              });\n        }\n    useEffect(() => { \n\n      getSavedHandler()\n      setSavedUserRecipes(JSON.parse(getSavedRecipes()))\n    }, []);\n\n    //function for removing from saved recipes- this is sent via props to listed recipe\n    function removeSavedRecipeHandler (id) {\n      setloading({ done: false });\n        removedSavedRecipe(id).then((res) => { \n          setTimeout(() => {\n            setloading({ done: true });\n          }, 3000);\n          toast.success(\"Removed from Saved Recipes\");\n          history.push(\"/recipes/saved-recipes\")\n      }).then(async (item) => {\n         await getSavedHandler()\n         setSavedUserRecipes(JSON.parse(getSavedRecipes()))\n        }).catch((error) => {\n        if (error.response && error.response.status === 401){\n           toast.error(\"Sorry we could not submit your request at this time.\")\n          } else{\n          toast.error(\"There may be a problem with the server. Please try again after a few moments.\");}\n      });\n    }\n\n  return (\n    <div className={classes.root}>\n     <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>Your Saved Recipes</h1>\n            <div class={styles.searchButtonMove}>\n            <Link to={\"/recipes/browse\"}>\n                <Button class={styles.newSearch} >Back to Search </Button>\n            </Link>\n            </div>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n                {errors && <div>Error: {errors}</div>}\n                 {!loading.done ? (\n                <Loading />\n              ) : (\n                <>\n                  <div class={styles.possibleStatement}> </div>\n                      <div class={appstyles.subheading} style={{textAlign: \"center\",fontSize: \"1.2em\"}}>Your recipes saved from FridgeMate!</div>\n                         \n                        <div className={styles.savedBox}>\n                          <Grid container spacing={1}  alignItems=\"center\" justify=\"center\" >\n                          {checker.length !== 0 ? (\n                              <>\n                                  {savedUserRecipes && savedUserRecipes.map((recipe) => (\n                                  <ListedRecipe key={recipe.title} recipe={recipe} savedType=\"saved recipes\" removeSavedRecipe={removeSavedRecipeHandler}/>\n                                ))} \n                              </>\n                              ) : (\n                                <NoIngredients type=\"recipes\" image={list} />\n                            )}\n                          </Grid>\n                        </div>\n                  </>\n              )}\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n     </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  savedRecipes: state.recipes.savedRecipes,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    settings: ({ email, username, profile }) =>\n      dispatch({ type: \"settings\", payload: { email, username, profile } }),\n    updateUsername: (username) =>\n      dispatch({ type: \"updateUsername\", payload: username }),\n    AddToSavedRecipes: (recipes) =>\n      dispatch({ type: \"savedRecipes\", payload: recipes }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedRecipes);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/nav/index.js",["202","203","204","205"],"import React, { Fragment, useEffect} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./nav.module.css\";\n\nimport SearchRecipeButton from \"../searchButton\";\nimport AuthenticationModal from \"../AuthenticationModal\";\nimport {logoutUser, getProfile } from \"../../services/authServices\";\n\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Fadein from '@material-ui/core/Fade';\nimport HelpIcon from '@material-ui/icons/Help';\n\n\n//IMAGES-icons\nimport fridge from \"../styles/imgs/fridge.png\";\nimport pantry from \"../styles/imgs/pantry.png\";\nimport pref from \"../styles/imgs/preference.png\";\nimport list from \"../styles/imgs/list.png\";\nimport ProfileDefault from \"../styles/imgs/profileDefault.png\";\n\n//FOOD IMAGES\nimport carrot from \"../styles/imgs/carrot.png\";\nimport chilli from \"../styles/imgs/chilli.png\";\nimport corn from \"../styles/imgs/corn.png\";\nimport egg from \"../styles/imgs/egg.png\";\nimport garlic from \"../styles/imgs/garlic.png\";\nimport radish from \"../styles/imgs/radish.png\";\nimport ramen from \"../styles/imgs/ramen.png\";\nimport tomato from \"../styles/imgs/tomato.png\";\n\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst NavBar = ({ actions, userLoggedIn, currentUserSettings,currentProfile }) => {\n  let history = useHistory();\n  //const [profile, setProfile] = useState(\"\");\n  const { setModalOpen } = actions;\n  const listFoodImg = [\n    carrot,\n    chilli,\n    corn,\n    egg,\n    garlic,\n    radish,\n    ramen,\n    tomato,\n  ];\n  let randomFoodImg =\n    listFoodImg[Math.floor(Math.random() * listFoodImg.length)];\n    useEffect(() => {\n         actions.updateProfile({profile: getProfile()})\n        });\n  function handleLogout() {\n    logoutUser()\n      .then((r) => {\n        //console.log(\"Got back response on logout\", r);\n        console.log(\"logged out\")\n        history.push(\"/\");\n        toast.success(\"Come back soon!\")\n      })\n      .catch((error) => {\n        toast.error(\"Oh no, error loggin out!\", error)\n        console.log(\n          \"The server may be down - caught an exception on logout:\",\n          error\n        );\n      });\n      \n    //clear storage if error\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"username\")\n    localStorage.removeItem(\"fridge\")\n    localStorage.removeItem(\"pantry\")\n    localStorage.removeItem(\"browsedRecipes\")\n    localStorage.removeItem(\"savedRecipes\")\n    localStorage.removeItem(\"singleRecipe\")\n    localStorage.removeItem(\"profile\")\n    actions.removeProfile()\n    actions.logout()\n    \n}\n\n  return (\n    <div class={styles.navBox}>\n      <AuthenticationModal />\n      <a class={styles.trigger}>\n        <i>\n          <MoreVertIcon fontSize=\"large\" />\n        </i>\n      </a>\n      <Fadein in={true}  timeout={2000}>\n      <nav class={styles.nav}>\n        <ul>\n          <li>\n            <Link to={\"/user/\" + userLoggedIn + \"/account-settings\"}>\n              <div class={styles.userProfile}>\n                {currentProfile ? (\n                  <img alt=\"profile of user\" src={currentProfile} /> ) : (\n                  <img alt=\"profile default of user\" src={ProfileDefault} /> )}\n                {userLoggedIn ? <div>{userLoggedIn}</div> : <div></div>}\n              </div>\n            </Link>\n          </li>\n          <li>\n            <SearchRecipeButton />\n            <a class={styles.navLink}></a>\n          </li>\n          <li>\n            <Link\n              to={\"/ingredients/\" + userLoggedIn + \"/fridge\"}\n              class={styles.navLink}\n            >\n              <img alt=\"Fridge\" src={fridge} />\n              <div>My Fridge</div>\n            </Link>\n          </li>\n          <li>\n            <Link to={`/ingredients/${userLoggedIn}/pantry`} class={styles.navLink}>\n              <img alt=\"Pantry\" src={pantry} />\n              <div>Pantry Staples</div>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/recipes/saved-recipes\" class={styles.navLink}>\n              <img alt=\"list\" src={list} />\n              <div>Saved Recipes</div>\n            </Link>\n          </li>\n          <li>\n            <Link to={\"/preferences/\" + userLoggedIn} class={styles.navLink}>\n              <img alt=\"preference\" src={pref} />\n              <div> My Preferences</div>\n            </Link>\n          </li>\n          <li class={styles.foodPic}>\n            <img alt=\"picture of food\" src={randomFoodImg} />\n          </li>\n          <li class={styles.navButtons}>\n            <Fragment>\n              {userLoggedIn ? (\n                <Fragment>\n                  {\" \"}\n                  <Button variant=\"outlined\" class={styles.navButtonstyle} onClick={handleLogout}>\n                    Log out\n                  </Button>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <Button\n                    variant=\"outlined\"\n                    class={styles.navButtonstyle}\n                    onClick={() => setModalOpen(\"login\")}\n                  >\n                    Login\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    class={styles.navButtonstyle}\n                    onClick={() => setModalOpen(\"register\")}\n                  >\n                    Register\n                  </Button>\n                </Fragment>\n              )}\n              \n            </Fragment>\n          </li>\n          <li style={{ textAlign: 'left', padding: '10px', }}>\n            <Button \n             onClick={() => setModalOpen(\"help\")}>\n            <HelpIcon/>\n            </Button>\n          </li>\n        </ul>\n           \n      </nav>\n    </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n  currentUserSettings: state.currentUserSettings,\n  currentProfile: state.currentUserSettings.profile,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n    logIn: () => dispatch({ type: \"login\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n    removeProfile: () => dispatch({ type: \"removeProfile\" }),\n    updateProfile: ({ profile }) =>\n      dispatch({ type: \"updateProfile\", payload: {profile } }),\n  },\n});\n\n// export default navBar;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/index.js",["206","207","208"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Field, Form, useFormik } from \"formik\";\n\nimport { preferencesList, preferencesName } from \"./list\";\n\nimport {\n  getPreference,\n  updatePreference,\n  getUsername,\n  getPref,\n  setPref,\n} from \"../../services/authServices\";\n\nimport Logo from \"../logo\";\nimport Loading from \"../loading\";\n\nimport styles from \"./preferences.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport pantrycartoon from \"../styles/imgs/pantrycartoon.png\";\n\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from \"@material-ui/core/Fade\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\nconst validate = (values) => {\n  const errors = {};\n  if (values.userPreferences === true) {\n    errors.userPreferences = \"Invalid\";\n  } else if (values.userPreferences === false) {\n    errors.userPreferences = \"Invalid\";\n  }\n  return errors;\n};\n\n// preferences component, is passed:\n// userPreferences which is state?\n// actions: which is submit (to db) and get payload/data from db.\nconst Preferences = ({ actions, userPreferences, userLoggedIn }) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [checked, setChecked] = useState(null);\n  const [loading, setloading] = useState({ done: false });\n\n  // On page load- This is calling the DB get request to get the initial user preference data\n  useEffect(() => {\n    getPreference(getUsername())\n      .then((pref) => {\n        setPref({ ...pref });\n        actions.updatePreferences(JSON.parse(getPref()));\n        setChecked(JSON.parse(getPref()));\n        //console.log(\"check local\", JSON.parse(getPref()))\n        //console.log(\"check redux\", userPreferences)\n      })\n      .catch((error) => {\n        //console.log(\"errors\");\n        //console.log(error.response);\n        if (error.response && error.response.status === 404)\n          //formik.setStatus(\"Error getting pref information \");\n          toast.error(\"Sorry we could not get your information at this time.\");\n        else\n          toast.error(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n    setTimeout(() => {\n      setloading({ done: true });\n      //console.log(\"check loading done\")\n    }, 3000);\n  }, []);\n\n  const formik = useFormik({\n    //calls boolean validation\n    validate,\n  });\n\n  function submitHandler(values) {\n    setloading({ done: false });\n    updatePreference({ ...values }, getUsername())\n      .then((pref) => {\n        setPref(pref);\n        actions.updatePreferences(pref);\n        setTimeout(() => {\n          setloading({ done: true });\n          history.push(\"/preferences/\" + getUsername());\n          toast.success(\n            \"Preferences Updated, maybe refresh your recipe search!\"\n          );\n        }, 3000);\n      })\n      .catch((error) => {\n        if (error.response && error.response.status === 404)\n          toast.error(\"Sorry we could not submit your request at this time.\");\n        else\n          toast.error(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  }\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true} timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>Preferences</h1>\n            </Grid>\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                {!loading.done ? (\n                  <Loading />\n                ) : (\n                  <>\n                    <div class={appstyles.subheading}>\n                      Select from the preferences below and we will only show\n                      you recipes that match.\n                    </div>\n                    <div className={styles.prefBox}>\n                      <div class={styles.formBox}>\n                        <Formik\n                          initialValues={{\n                            vegetarian: userPreferences.vegetarian,\n                            vegan: userPreferences.vegan,\n                            glutenFree: userPreferences.glutenFree,\n                            dairyFree: userPreferences.dairyFree,\n                            veryHealthy: userPreferences.veryHealthy,\n                            cheap: userPreferences.cheap,\n                            veryPopular: userPreferences.veryPopular,\n                            sustainable: userPreferences.sustainable,\n                          }}\n                          onSubmit={async (values) => {\n                            await sleep(500);\n                            submitHandler(values);\n                          }}\n                        >\n                          {({ values }) => (\n                            <Form>\n                              {/* form maps over list in ./list.js, can update more easily if needed */}\n                              {preferencesList.map((preference, index) => (\n                                <label key={index}>\n                                  <Field type=\"checkbox\" name={preference} />\n                                  <span class={styles.prefItem}>\n                                    {preferencesName[index]}\n                                  </span>\n                                </label>\n                              ))}\n                              <Button class={styles.updateButton} type=\"submit\">\n                                Update Preferences\n                              </Button>\n                            </Form>\n                          )}\n                        </Formik>\n                      </div>\n                      <div class={styles.imgBox}>\n                        <img alt=\"cartoon ingredients\" src={pantrycartoon} />\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\n//checks state\nconst mapStateToProps = (state) => ({\n  userPreferences: state.userPreferences.preferences,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\n//updates state\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    updatePreferences: (data) =>\n      dispatch({ type: \"updatePreferences\", payload: data }),\n    submit: () => dispatch({ type: \"submit\" }),\n  },\n});\n\n//sends to reducer\nexport default connect(mapStateToProps, mapDispatchToProps)(Preferences);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/singleRecipe/index.js",["209","210","211","212","213"],"import React, {useEffect, useState} from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Logo from \"../logo\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\nimport styles from \"./single.module.css\";\n\nimport Loading from \"../loading\";\nimport {getSingleRecipePage, getSingleRecipe, setSingleRecipe} from '../../services/recipeServices'\n\n\n//MATERIAL\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from '@material-ui/core/Fade';\nimport Button from '@material-ui/core/Button';\n\n\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nconst SingleRecipe = ({ actions, savedRecipes, singleRecipe }) => {\n  const classes = useStyles();\n  const { id } = useParams();\n\n  const [displayRecipe, setDisplayRecipe] = useState(\"\");\n  const [loading, setloading] = useState({ done: false });\n\n  const {cuisines, diets, dishTypes, image, readyInMinutes, recipeID, servings, \n  sourceUrl, title, _id, extendedIngredients, username, vegetarian, vegan, glutenFree, dairyFree, veryHealthy, cheap, \n  veryPopular, sustainable} = displayRecipe \n\n\n  function ingredientFilter (extendedIngredients){\n    const array = []\n    extendedIngredients.map((ingredient) => {\n      return array.push(ingredient.name)}) \n    const filteredExtendedIngredients = [...new Set(array)];\n    return filteredExtendedIngredients\n   }\n\n  //get saved receipes from local storage and assign to state first then use that state to display recipes\n    function checkSingleRecipeLocal () {\n      let checker =  JSON.parse(localStorage.getItem(\"singleRecipe\"))\n   //  \n      if (!checker){\n        return null\n      }\n      if (checker.id){\n        checker.id = checker.id.toString()\n        const exists = Object.values(checker).some(function(k) { \n        return k === id })\n        return exists\n      } else if (checker.recipeID) {\n        checker.recipeID = checker.recipeID.toString()\n        const exists = Object.values(checker).some(function(k) { \n        return k === id })\n        return exists\n      }\n  }\n\n  useEffect(() => {\n    //if already in local storage, grab from local instead of DB\n      let checkLocal = checkSingleRecipeLocal ()\n      if (checkLocal ) {\n          console.log(\"already in local\")\n          let currentSingleRecipe = JSON.parse(localStorage.getItem(\"singleRecipe\"))\n          actions.updateSingleRecipe(currentSingleRecipe)\n          setDisplayRecipe(currentSingleRecipe)\n          setTimeout(() => {\n            setloading({ done: true });\n            }, 5000)\n      } else {\n            getSingleRecipePage(id).then((recipe) => { \n                let newIng =ingredientFilter (recipe.extendedIngredients)\n                recipe.extendedIngredients = newIng\n                setDisplayRecipe(recipe)\n                actions.updateSingleRecipe(recipe)\n                setSingleRecipe(recipe)\n                //filterIngredients(displayRecipe.extendedIngredients)\n                setTimeout(() => {\n                setloading({ done: true });\n                }, 5000)\n            }).catch((error) => { \n             if (error.response && error.response.status === 404){\n              setloading({ done: false });\n              toast.error(\"Sorry we could not load this recipe at this time.\");\n              }else{\n              setloading({ done: false });\n              toast.error(\n                \"There may be a problem with the server. Please try again after a few moments.\"\n              );}\n            })\n       }\n    },[])\n\n  return (\n    <div className={classes.root}>\n     <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>{title}</h1>\n            <div class={styles.searchButtonMove}>\n             {displayRecipe.username ? (\n            <Link to={\"/recipes/saved-recipes\"}>\n                <Button class={styles.newSearch} >Back to Saved Recipes </Button>\n            </Link>\n            ) : (\n              <>\n            <Link to={\"/recipes/browse\"}>\n                  <Button class={styles.newSearch} >Back to Search </Button>\n            </Link>\n              </>\n             )}\n            </div>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n            {displayRecipe.username ? (\n            <div class={appstyles.subheading}>This recipe is in your Saved Recipes!</div>  \n             ) : (\n              <>\n              <div class={appstyles.subheading} style={{alignSelf: \"center\"}}>Maybe save this recipe for later? \n              <Button variant=\"outlined\" class={styles.savedButton} >Save Recipe!</Button>\n              </div> \n              </>\n             )}\n             {!loading.done ? (\n                <Loading />\n              ) : (\n                <>\n                      <div class={styles.singleBox}>\n                        <Grid  container spacing={1}  wrap=\"wrap\" alignItems=\"center\" justify=\"center\" >\n                              <div class={styles.summaryBox}> \n                                  <div class={styles.summaryText}>         \n                                      <p><strong>Serves:</strong> {servings} </p>\n                                      <p><strong>Cooking Time:</strong> {readyInMinutes} mins </p>\n                                      <p><strong>Cuisines:</strong> { cuisines.length !== 0 ? <>{cuisines.join(\" , \")}</> : <>n/a</> }</p>\n                                      <p><strong>Dish Types:</strong> { dishTypes.length !== 0   ? <>{dishTypes.join(\" , \")}</> : <>n/a</> }</p>\n                                      <p><strong>Diets:</strong>  { diets.length !== 0   ? <>{diets.join(\" , \")}</> : <>n/a</> }</p>\n                                       <div class={styles.labels}>\n                                        { vegetarian ? <span class={styles.icons}>Veg</span> : <></> }\n                                        { vegan ? <span class={styles.icons}>Vg</span> : <></>}\n                                        { glutenFree ? <span class={styles.icons}>Gf</span> : <></> }\n                                        { dairyFree ? <span class={styles.icons}>Df</span> : <></> }\n                                        { veryHealthy ? <span class={styles.icons}>Very Healthy</span> : <></> }\n                                        { cheap ? <span class={styles.icons}>Cheap</span> : <></> }\n                                        { veryPopular ? <span class={styles.icons}>Very Popular </span> : <></> }\n                                        { sustainable ? <span class={styles.icons}>Sustainable</span> : <></> }\n                                          </div>\n                                      <a href={sourceUrl} > <p class={styles.url}><strong>View Source- With Full Instructions</strong> </p></a> \n                                  </div>  \n                                    <div class={styles.imageBox}> \n                                      <img alt=\"recipe\" src={image} />      \n                                    </div>\n                              </div>\n                          <div class={styles.instructBox}> \n                              <h4>Ingredients</h4>\n                              \n                               <ul class={styles.ingredientBox}>\n                                {extendedIngredients && extendedIngredients.map((ingredient) => (\n                                   <li key={ingredient}> {ingredient.replace(/^\\w/, (c) => c.toUpperCase())}</li>\n                                   ))}    \n                               </ul>  \n                                \n                              <h4>Instructions</h4>\n                              <div>\n                              <a href={sourceUrl} > <div class={styles.url}><strong>View Source- With Full Instructions</strong> </div></a> \n                              </div>\n\n                          </div>  \n                        </Grid>\n                      </div>\n                  </>\n              )}\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  savedRecipes: state.recipes.savedRecipes,\n  singleRecipe: state.recipes.singleRecipe,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    updateSingleRecipe: (username) =>\n      dispatch({ type: \"singleRecipe\", payload: username }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleRecipe);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/footer/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/home/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/notFound/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/fridge/index.js",["214"],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/pantry/index.js",["215"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport appstyles from \"../../app.module.css\";\nimport styles from \"./pantry.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport {\n  getAllPantryIngredients,\n  deleteAllPantry,\n  setPantry,\n  getPantry,\n} from \"../../services/ingredientServices\";\nimport { getUsername } from \"../../services/authServices\";\n\nimport Logo from \"../logo\";\nimport Ingredients from \"../ingredient\";\nimport NoIngredients from \"../noItemsPage\";\nimport AutocompleteIngredients from \"../ingredientAutocomplete\";\nimport Loading from \"../loading\";\nimport SearchRecipeButton from \"../searchButton\";\n\n\nimport Fadein from '@material-ui/core/Fade';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport pantry from \"../styles/imgs/pantry.png\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Pantry = ({ actions, pantryIngredients }) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [errors, setErrors] = useState(null);\n  const [loading, setloading] = useState({ done: false });\n\n  const checker = getPantry();\n  //console.log(checker);\n\n  useEffect(() => {\n    getAllPantryIngredients(getUsername())\n      .then((res) => {\n        //console.log(r);\n        actions.addToPantry(res.pantryIngredients);\n        setPantry(res.pantryIngredients);\n        history.push(\"/ingredients/\" + getUsername() + \"/pantry\");\n      })\n      .catch((error) => {\n        //console.log(\"errors\")\n        //console.log(error);\n        if (error.response && error.response.status === 401)\n          actions.changeError(\"Sorry we could not get your pantry at this time.\");\n        else\n          actions.changeError(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n        setTimeout(() => {\n        setloading({ done: true })\n        console.log(\"check loading done\")  \n        }, 4000);\n  }, []);\n\n  const handleClearPantry = async () => {\n    //console.log(\"emptying all pantry\");\n    deleteAllPantry(getUsername())\n      .then((res) => {\n        //console.log(r);\n        actions.clearPantry();\n        setPantry();\n        history.push(\"/ingredients/\" + getUsername() + \"/pantry\");\n        toast.warn(\"You have no staples left in your pantry!\");\n      })\n      .catch((error) => {\n        //console.log(\"errors\")\n        //console.log(error.response)\n        toast.error(\"Sorry, we could not clear your pantry at this time.\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Sorry, we could not clear your pantry at this time.\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  };\n\n  return (\n    <div className={classes.root}>\n     <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>My Pantry Staples</h1>\n            <div class={styles.searchButtonMove}>\n              <SearchRecipeButton />\n            </div>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n              {errors && <div>Error: {errors}</div>}\n              {!loading.done ? (\n                <Loading />\n              ) : (\n                <>\n                <div class={appstyles.subheading}>Add staples to your Pantry Below and we will use them to find you recipes!</div>\n                  <div class={styles.pantryAutoBox}>\n                    <AutocompleteIngredients type=\"pantry\" />\n                    <div class={styles.pantry}>\n               \n                      <img alt=\"cartoon pantry \" src={pantry} />\n                    </div>\n                  </div>\n                  <Grid\n                    container\n                    spacing={1}\n                    wrap=\"wrap\"\n                    alignItems=\"center\"\n                    justify=\"center\"\n                    class={styles.background}\n                  >\n                    {checker ? (\n                      <Ingredients ingredients={pantryIngredients} />\n                    ) : (\n                      <NoIngredients type=\"pantry\" image={pantry} />\n                    )}\n                  </Grid>\n                  {checker ? (\n                    <div className={styles.button}>\n                      <Button\n                        variant=\"outlined\"\n                        width=\"100px\"\n                        onClick={() => {\n                          handleClearPantry();\n                        }}\n                      >\n                        Clear All Pantry Contents\n                      </Button>\n                    </div>\n                  ) : (\n                    <div></div>\n                  )}\n                </>\n              )}\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n     </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  pantryIngredients: state.userIngredients.pantryIngredients,\n  error: state.errorsMessages,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    addToPantry: (newIngredients) =>\n      dispatch({ type: \"pantryIngredients\", payload: newIngredients }),\n    clearPantry: () => dispatch({ type: \"deleteAllPantry\" }),\n    changeError: (error) => dispatch({ type: \"error\", payload: error }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pantry);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/resetPassword/index.js",["216"],"import React,{useEffect,useState} from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\n\nimport styles from \"../styles/modals.module.css\";\nimport {\n  resetPassword,\n  updatePasswordViaReset\n} from \"../../services/authServices\";\nimport { useHistory,useParams } from \"react-router-dom\";\n\nimport Button from \"@material-ui/core/Button\";\nimport LockIcon from '@material-ui/icons/Lock';\nimport Fade from 'react-reveal/Fade';\nimport Loading from \"../loading\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst validate = (values) => {\n  const errors = {};\n\n   if (!values.password) {\n    errors.password = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.password\n    )\n  ) {\n    errors.password =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  }\n    \n    if (!values.confirmPassword) {\n        errors.confirmPassword = \"Required\";\n    } else if (values.password !== values.confirmPassword) {\n        errors.confirmPassword = \"Passwords do not match.\";\n    }\n\n    return errors;\n};\n\nconst ResetPassword = ({ actions, user, modalId }) => {\n  let history = useHistory();\n  const { token } = useParams();\n  const [loading, setloading] = useState({ done: true });\n \n  const text = {\n    color: \"red\",\n  };\n   useEffect(() => {\n       resetPassword(token).then(res =>{\n         actions.setUsername(res.username)\n         setloading({ done: true });\n       }).catch((error) => { \n           toast.error(\"Password reset link is invalid or has expired\");\n           history.push(\"/\");\n       })\n\n     }, []);\n  \n  const formik = useFormik({\n    initialValues: {\n      password: \"\",\n    },\n    validate,\n\n    onSubmit: async (values) => {\n      updatePasswordViaReset({\n          username: user,\n          password: values.password,\n          resetPasswordToken: token,\n        },)\n        .then(async (r) => {\n          setloading({ done: false });\n          await console.log(r);\n          setTimeout(() => {\n           toast.success(\"Password Updated!\");\n           setloading({ done: true });\n           history.push(\"/\");\n           actions.logout()\n            }, 6000); \n        })\n        .catch((error) => {\n          //console.log(error);\n          toast.error(\"Oh no!\");\n          if (error.response && error.response.status === 401)\n            formik.setStatus(\n              \"Sorry, we couldn't update your password at this time.\"\n            );\n          else\n            formik.setStatus(\n              \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n        });\n    },\n  });\n\n  return (\n   <div class={styles.resetBox}>\n    <div class={styles.loginSignupBox}>\n      <h1>Reset Password</h1>\n      <div style={{alignSelf: \"center\"}}>\n      <LockIcon/>\n      </div>\n       {!loading.done ? (\n              <div style={{maxHeight: \"400px\"}}><Loading/></div>\n              ) : (\n                <>\n                <div style={{alignSelf: \"center\"}}>\n                    User: {user && user}\n                </div>\n                <form onSubmit={formik.handleSubmit}>\n                    {formik.status && (\n                    <Fade bottom>\n                        <div style={text}>\n                        Error: {formik.status}. Please try again.\n                        </div>\n                    </Fade>\n                    )}\n                        <label htmlFor=\"password\">Password:</label>\n\n                        <input\n                        id=\"resetPassword\"\n                        class=\"resetPassword\"\n                        name=\"password\"\n                        placeholder=\"Password (8 + Characters, 1 Lowercase, 1 Uppercase, 1 Number & 1 Special)\"\n                        type=\"password\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.password}\n                        />\n\n                        {formik.touched.password && formik.errors.password ? (\n                        <Fade bottom >\n                        <div style={text}>{formik.errors.password}</div>\n                        </Fade>\n                        ) : null}\n\n                        <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n\n                        <input\n                        id=\"resetConfirmPassword\"\n                        class=\"resetConfirmPassword\"\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        placeholder=\"Retype Password \"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.confirmPassword}\n                        />\n\n                        {formik.touched.confirmPassword && formik.errors.confirmPassword ? (\n                            <Fade bottom >\n                        <div style={text}>{formik.errors.confirmPassword}</div>\n                            </Fade>\n                        ) : null}\n                    <div>\n                    <Button\n                        variant=\"contained\"\n                        class={styles.loginSignupButtons}\n                        type=\"submit\"\n                        onClick={formik.handleSubmit}\n                    >\n                        Reset Password\n                    </Button>\n                    \n                    </div>\n                    <div>\n                    <div>\n                OR\n                    </div>\n                    <Button\n                        \n                        class={styles.modalButton}\n                        onClick={() => actions.openModal(\"register\")}\n                    >\n                    Create New Account\n                    </Button>\n                    <Button\n                        class={styles.modalCancelButton}\n                        onClick={() => actions.openModal(\"login\")}\n                    >\n                        Back to Login\n                    </Button>\n                    </div>\n                </form>\n                  </>\n              )}\n    </div>\n  </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.userLoggedIn.username,\n   modalId: state.modalOpen.modal,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setUsername: (username) => dispatch({ type: \"login\", payload: username }),\n    openModal: (modalId) => dispatch({ type: \"openModal\", payload: modalId }),\n    closeModal: () => dispatch({ type: \"closeModal\" }),\n     logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/config/api.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/browseRecipes/index.js",["217"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Logo from \"../logo\";\nimport appstyles from \"../../app.module.css\";\nimport styles from \"./browse.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport ListedRecipe from \"../listedRecipe\";\nimport Loading from \"../loading\";\n\nimport Fadein from '@material-ui/core/Fade';\n\n//MATERIAL\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\n\nimport {browseSearchRecipes,  getBrowsedRecipes, setBrowsedRecipes, addNewSavedRecipe, setSavedRecipes} from '../../services/recipeServices'\nimport {getFridge, getPantry } from '../../services/ingredientServices'\n\nimport {toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst BrowseRecipes = ({ browseRecipes, actions }) => {\n  const classes = useStyles();\n  let history = useHistory();\n   const [pantryChecker, setPantryChecker] = useState(\"\");\n   const [fridgeChecker, setFridgeChecker] = useState(\"\");\n   const [loading, setloading] = useState(false);\n   const [fridgeLoading, setFridgeLoading] = useState({ done: true });\n   const [recipesState, setRecipesState] = useState(null);\n   const [errors, setErrors] = useState(null);\n\n\n  //This checks if the fridge is empty or not, whether the DB route gets called again\n  function handleNewIngredientsAdded () {\n    let fridgeChecker = getFridge()\n        if (fridgeChecker === []) {\n          setBrowsedRecipes() //local storage\n          history.push(\"/recipes/browse\")\n        } else {   \n      }   \n  }\n\n//Main function for returning recipes to browse\n  function recipeSearchHandler (){\n    //Checking if fridge is empty or not\n   handleNewIngredientsAdded()\n   if (!getBrowsedRecipes()) {  //if none in local storage\n        setloading(false)\n       browseSearchRecipes()\n            .then((recipes) => {   \n                      setRecipesState(recipes) //state \n                      setBrowsedRecipes(recipes) //local storage\n                      actions.updatedBrowseRecipes(recipes)  //redux\n                      toast.success(\"Here are your recipes!\")\n                      setErrors(null)\n               }).then (\n                  setTimeout(() => {\n                  setloading(true)\n                  }, 10000)\n                  \n               )\n              .catch((error) => {\n                  if (error.response && error.response.status === 401)\n                  toast.error(\" Recipe search failed. Try again. \")\n                  else   \n                  toast.error(\"There may be a problem with the server. Please try again after a few moments.\")        \n                  });\n        } else {\n         setRecipesState(JSON.parse(getBrowsedRecipes()))\n         actions.updatedBrowseRecipes(JSON.parse(getBrowsedRecipes())) \n         setTimeout(() => {\n              setloading(true)\n                  }, 10000)\n         }\n  }\n\n  useEffect(() => {\n    //handleNewIngredientsAdded()\n    recipeSearchHandler()\n    setFridgeChecker(getFridge())\n    setPantryChecker(getPantry())\n   },[])\n\n  //if search again button is clicked, clear local storage and call the route again so the search initalizes again\n    function handleSearchAgain () {\n        setloading(false)\n        setBrowsedRecipes() //local storage\n        recipeSearchHandler()\n        history.push(\"/recipes/browse\")\n    }\n\n  //Write savedRecipe Handler\n  async function saveRecipeHandler(newRecipe) {\n       //setloading(false)\n       setFridgeLoading({ done: false }); \n          await addNewSavedRecipe(newRecipe)\n            .then((res) => {\n              //saved to redux\n              actions.AddToSavedRecipes(res)\n              //save to local storage\n              setSavedRecipes(res)\n              setErrors(\"\")\n              toast.success(\" You have saved this recipe!\");\n              setTimeout(() => {\n                  setFridgeLoading({ done: true }); \n                  }, 5000)\n            })\n            .catch((error) => {\n              setFridgeLoading({ done: true }); \n              console.log(error.response)\n              if (error.response  === 401){\n                toast.error(\"Oh no, we couldnt' save your recipe!\")\n              } else if (error.response.status === 422) {\n                toast.error(\"Oops, you have already saved this recipe\")\n               } else { \n                toast.error( \"There may be a problem with the server. Please try again after a few moments.\");\n              }\n                history.push(\"/recipes/browse\")\n          });\n    }\n\n  const randomRecipe = \"You have no ingredients in your fridge, so here are some recipe ideas!\"\n\n  return (\n      <div className={classes.root}>\n       <Fadein in={true}  timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>Browse Recipes</h1>\n              <div class={styles.searchButtonMove}>\n                <Button class={styles.newSearch} onClick={handleSearchAgain}>Refresh Search</Button>\n              </div>\n            </Grid>\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                 {errors && <div>Error: {errors}</div>}\n               {loading === false ? (\n                <Loading/>\n                    ) : (  \n                      <div>\n                       {fridgeChecker || pantryChecker ? (\n                          <div class={styles.possibleStatement}>\n                            You can make {recipesState.length} possible recipes!  \n                            <div class={appstyles.subheading} style={{fontSize: \"0.7em\"}}>Click save recipe to save them to your collection!</div>\n                          </div> ) : ( \n                           <div class={styles.possibleStatement}>\n                           {randomRecipe} \n                            </div>\n                          )} \n                          <div className={styles.browseBox}>\n                          <Grid container spacing={1}  alignItems=\"center\" justify=\"center\" >\n                          {browseRecipes && browseRecipes.map((recipe) => (\n                                  <ListedRecipe key={recipe.id} recipe={recipe} saveRecipe={saveRecipeHandler}  loadingFridge={fridgeLoading} idCheck={recipe.id}/>\n                                   ))}     \n                            </Grid>\n                        </div>\n                    </div>\n                 )} \n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n        </Fadein>\n      </div>\n    )\n  \n};\n\nconst mapStateToProps = (state) => ({\n  browseRecipes: state.recipes.browseRecipes,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    settings: ({ email, username, profile }) =>\n      dispatch({ type: \"settings\", payload: { email, username, profile } }),\n    updateUsername: (username) =>\n      dispatch({ type: \"updateUsername\", payload: username }),\n    updatedBrowseRecipes: (recipes) =>\n      dispatch({ type: \"browseRecipes\", payload: recipes }),\n    AddToSavedRecipes: (recipes) =>\n      dispatch({ type: \"savedRecipes\", payload: recipes }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowseRecipes);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/styles/makeStyles.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/ingredientServices.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/services/recipeServices.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/logo/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/profileImage/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/loading/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/searchButton/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/noItemsPage/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/ingredientAutocomplete/index.js",["218"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./auto.module.css\";\nimport ingredients from \"../../data/ingredients.json\";\nimport pantry from \"../../data/pantry.json\";\n\nimport {\n  addFridgeItem,\n  addPantryItem,\n  setFridge,\n  setPantry,\n} from \"../../services/ingredientServices\";\nimport { getUsername } from \"../../services/authServices\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction AutocompleteIngredients({\n  actions,\n  fridgeIngredients,\n  pantryIngredients,\n  type,\n  username,\n}) {\n  //removes selected ingredient from list of ingredients to add\n  // const filteredFridge = fridgeIngredients\n  //   ? ingredients.filter(\n  //       (ingredient) => !fridgeIngredients.includes(ingredient.name)\n  //     )\n  //   : ingredients;\n\n  // const filteredPantry = pantryIngredients\n  //   ? pantry.filter(\n  //       (ingredient) => !pantryIngredients.includes(ingredient.name)\n  //     )\n  //   : pantry;\n  // var filteredList;\n  // if(type === \"fridge\" ){\n  //   filteredList = filteredFridge\n  // } else {\n  //   filteredList = pantry\n  // }\n\n  //const filteredList = type === \"fridge\" ? filteredFridge : pantry;\n  //console.log(\"check filteredList\", filteredList)\n  const isFridge = type === \"fridge\";\n  //removes selected ingredient from list of ingredients to add\n\n  const filteredFridge = fridgeIngredients\n    ? ingredients.filter(\n        (ingredient) => !fridgeIngredients.includes(ingredient.name)\n      )\n    : ingredients;\n\n  const filteredPantry = pantryIngredients\n    ? pantry.filter((i) => !pantryIngredients.includes(i.name))\n    : pantry;\n\n  const filteredList = isFridge ? filteredFridge : filteredPantry;\n\n  console.log(\"check filteredList\", filteredPantry);\n\n  let history = useHistory();\n\n  const [values, setValues] = useState([]);\n  const [errors, setErrors] = useState(null);\n\n  function handleAddFridge(event) {\n    //console.log(values);\n    const newValues = values.map((i) => i.name);\n    //console.log(\"check fridge\", newValues);\n\n    addFridgeItem(getUsername(), { item: newValues })\n      .then((res) => {\n        actions.addToFridge(res.fridgeIngredients);\n        setFridge(res.fridgeIngredients);\n        history.push(\"/ingredients/\" + getUsername() + \"/fridge\");\n        toast.success(\n          \" New Fridge Ingredient added, lets search for some recipes!\"\n        );\n        setValues([]);\n      })\n      .catch((error) => {\n        toast.error(\"Oh no error!\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Error adding to your Fridge\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  }\n\n  function handleAddPantry(event) {\n    const newValues = values.map((i) => i.name);\n    addPantryItem(getUsername(), { item: newValues })\n      .then((res) => {\n        actions.addToPantry(res.pantryIngredients);\n        setPantry(res.pantryIngredients);\n        history.push(\"/ingredients/\" + getUsername() + \"/pantry\");\n        toast.success(\" New pantry staple added!\");\n      })\n      .catch((error) => {\n        toast.error(\"Oh no error!\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Error adding to your pantry\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  }\n\n  console.log(\"values in state\", values);\n  return (\n    // autocomplete list\n    <div class={styles.autoComplete}>\n      {errors && <div>{errors}</div>}\n      <Autocomplete\n        multiple\n        id=\"tags-standard\"\n        options={filteredList}\n        getOptionLabel={(option) => option.name}\n        filterSelectedOptions=\"true\"\n        onChange={(event, value) => {\n          const filteredValues = _.reject(value, ({ name }) =>\n            _.includes(isFridge ? fridgeIngredients : pantryIngredients, name)\n          );\n          setValues(filteredValues);\n        }}\n        renderInput={(params) => {\n          const filteredAdornment = _.reject(\n            _.get(params, \"InputProps.startAdornment\"),\n            (adornment) => {\n              const {\n                props: { label },\n              } = adornment;\n              return _.includes(\n                isFridge ? fridgeIngredients : pantryIngredients,\n                label\n              );\n            }\n          );\n          _.set(params, \"InputProps.startAdornment\", filteredAdornment);\n\n          return (\n            <TextField\n              inputValue=\"\"\n              {...params}\n              variant=\"standard\"\n              label={`Add Ingredients to your ${type} here`}\n              placeholder=\"Ingredients\"\n            />\n          );\n        }}\n      />\n      <Button\n        class={styles.button}\n        onClick={isFridge ? handleAddFridge : handleAddPantry}\n      >\n        {\" \"}\n        Add Ingredients\n      </Button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  username: state.userLoggedIn.username,\n  fridgeIngredients: state.userIngredients.fridgeIngredients,\n  pantryIngredients: state.userIngredients.pantryIngredients,\n  error: state.errorsMessages,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    addToFridge: (newIngredients) =>\n      dispatch({ type: \"fridgeIngredients\", payload: newIngredients }),\n    addToPantry: (newIngredients) =>\n      dispatch({ type: \"pantryIngredients\", payload: newIngredients }),\n    changeError: (error) => dispatch({ type: \"error\", payload: error }),\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AutocompleteIngredients);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/ingredient/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/preferences/list.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/data/testSaveRecipeData.js",[],["219","220"],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/listedRecipe/index.js",["221","222","223","224","225","226"],"import React,{useState} from 'react'\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./listRecipe.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\nimport cartoonPlaceholder from \"../styles/imgs/cartooningredients.png\";\n\n//MATERIAL\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport KitchenIcon from '@material-ui/icons/Kitchen';\n\nconst ListedRecipe = ({userLoggedIn, recipe, saveRecipe, savedType, removeSavedRecipe, loadingFridge, idCheck}) => {\n  const classes = useStyles();\n  const [loading, setloading] = useState({ done: false });\n  const {recipeID, id, _id, usedIngred, missedIngred, title, \n  readyInMinutes, servings, image,\n  vegetarian, vegan, glutenFree, dairyFree, veryHealthy, cheap, \n  veryPopular, sustainable\n  } = recipe \n\n  let convert = Math.floor(readyInMinutes / 60) + \" hr & \" +  readyInMinutes % 60 + \" mins\"\n  \n  async function collectRecipeHandler () {\n   \n      let addRecipe = recipe\n      const newRecipe = {\n                  username: userLoggedIn,\n                  recipeID: addRecipe.id ,\n                  title: addRecipe.title,\n                  readyInMinutes: addRecipe.readyInMinutes,\n                  extendedIngredients: addRecipe.extendedIngredients,\n                  servings: addRecipe.servings,\n                  sourceUrl: addRecipe.sourceUrl,\n                  image: addRecipe.image,\n                  cuisines: addRecipe.cuisines,\n                  dishTypes: addRecipe.dishTypes,\n                  diets: addRecipe.diets,\n                  instructions:  addRecipe.instructions,\n                  vegetarian: addRecipe.vegetarian,\n                  vegan: addRecipe.vegan,\n                  glutenFree: addRecipe.glutenFree,\n                  dairyFree: addRecipe.dairyFree,\n                  veryHealthy: addRecipe.veryHealthy,\n                  cheap: addRecipe.cheap,\n                  veryPopular: addRecipe.veryPopular,\n                  sustainable: addRecipe.sustainable,\n              }\n        setloading({ done: false });\n        await saveRecipe(newRecipe)\n        setTimeout(() => {\n          setloading({ done: true });\n          }, 5000)\n    \n  }\n\n  async function deleteRecipeHandler (id) {\n      setloading({ done: false }); \n      await removeSavedRecipe(id)\n        setTimeout(() => {\n          setloading({ done: true });\n          }, 5000)\n   }\n\n   if (savedType ===\"saved recipes\") {\n\n   //This is for save Recipe page\n    return (\n            <div>\n                <Grid item sm spacing={1}   wrap=\"wrap\">\n                  <Paper className={classes.paper} variant=\"outlined\" > \n                    <Link to={\"/recipes/\" + _id +\"/recipe\"  }>\n                          <div class={styles.listItem}>\n                                  {image ? (\n                                  <img alt=\"recipe\" src={image} />        \n                                  ):(\n                                    <img alt=\"recipe\" src={cartoonPlaceholder} />    \n                                  )}      \n                                  <h3>{title}</h3>\n                                  <p>Serves: {servings}</p>\n                                  <p>Prep time: {convert}</p>\n                                </div>\n                                   </Link>\n                            <Button variant=\"outlined\" class={styles.removeButton} onClick={()=>{deleteRecipeHandler(_id)}}>Remove</Button>\n                    </Paper>  \n    \n                </Grid>\n            </div>)\n\n   } else {\n  //This is for browse Recipe page\n    return (\n        <div>\n           <Grid item sm spacing={1}   wrap=\"wrap\">\n                <Paper className={classes.paper} variant=\"outlined\" > \n                <Link to={\"/recipes/\" + id +\"/recipe\" }>\n                 <div class={styles.listItem}>\n                    <div>You have {usedIngred}/{usedIngred+ missedIngred} ingredients! </div>\n                    {image ? (\n                     <img alt=\"recipe\" src={image} />        \n                    ):(\n                      <img alt=\"recipe\" src={cartoonPlaceholder} />    \n                    )}       \n                    <h3>{title}</h3>\n                    <p><strong>Serves:</strong> {servings}</p>\n                    <p><strong>Prep time:</strong> {convert}</p>\n                  <div class={styles.labels}>\n                    { vegetarian ? <span class={styles.icons}>Veg</span> : <></> }\n                    { vegan ? <span class={styles.icons}>Vg</span> : <></>}\n                    { glutenFree ? <span class={styles.icons}>Gf</span> : <></> }\n                    { dairyFree ? <span class={styles.icons}>Df</span> : <></> }\n                      </div>\n                  </div>\n                  \n                 </Link>\n                 {!loadingFridge.done && id === idCheck ? (\n                    <KitchenIcon className={styles.fridgeIcon} /> \n                    ) : (\n                    <Button variant=\"outlined\" class={styles.savedButton} onClick={collectRecipeHandler}>Save Recipe!</Button>\n                  )}   \n               </Paper>\n           </Grid>\n        </div>\n      )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListedRecipe);\n\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/carousel/index.js",["227"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AutoRotatingCarousel } from \"material-auto-rotating-carousel\";\n\nimport SearchRecipeButton from \"../searchButton\";\nimport fridge from \"../styles/imgs/fridgebackgroundother.jpg\";\nimport pantry from \"../styles/imgs/pantrybackground.jpg\";\nimport recipe from \"../styles/imgs/recipeimage.jpg\";\nimport pref from \"../styles/imgs/supermarket.jpg\";\nimport recipelist from \"../styles/imgs/recipelist2.jpg\";\nimport styles from \"./carousel.module.css\";\nimport { Slide } from \"material-auto-rotating-carousel\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\n\nconst { lightGreen } = require(\"@material-ui/core/colors\");\nconst Button = require(\"@material-ui/core/Button\").default;\n\nconst Carousel = ({ actions }) => {\n  const [state, setState] = useState({ open: false });\n\n  const onCloseHandler = () => {\n    console.log(\"onCloseHandler\");\n\n    setState({ open: false });\n    actions.setModalOpen(\"register\");\n  };\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: 30 }}>\n      <Button\n        class={styles.ButtonOutline}\n        onClick={() => setState({ open: true })}\n      >\n        Where to start?\n      </Button>\n      <AutoRotatingCarousel\n        label=\"Get started\"\n        open={state.open}\n        onClose={onCloseHandler}\n        onStart={() => setState({ open: false })}\n        style={{ position: \"absolute\" }}\n        ButtonProps={{ color: \"primary\", endIcon: <KeyboardArrowRightIcon /> }}\n      >\n        <Slide\n          media={\n            <img\n              src={fridge}\n              alt=\"fruits and vegetables\"\n              class={styles.slideImage}\n            />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Add Ingredients to your Fridge\"\n          subtitle=\"Cheese, bread, chicken, soy sauce.. any ingredients in your fridge!\"\n        />\n        <Slide\n          media={\n            <img\n              src={pantry}\n              alt=\"pantry ingredients\"\n              class={styles.slideImage}\n            />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Add staples to your Pantry\"\n          subtitle=\"Save your usual pantry staples!\"\n        />\n        <Slide\n          media={\n            <img src={pref} alt=\"grocery store\" class={styles.slideImage} />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Select any diet preferences.\"\n          subtitle=\"Gluten free, dairy free? You can decide! \"\n        />\n        <Slide\n          media={\n            <img src={recipe} alt=\"bowl of food\" class={styles.slideImage} />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Browse recipes!\"\n          subtitle=\"We will show you recipes that include the ingredients from your fridge!\"\n        />\n        <Slide\n          media={\n            <img\n              src={recipelist}\n              alt=\"ipad with recipe on it\"\n              class={styles.slideImage}\n            />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Save them for later!\"\n          subtitle=\"Add recipes to your saved collection so you can use them again!\"\n        />\n      </AutoRotatingCarousel>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Carousel);\n","/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/AuthenticationModal/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/register/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/login/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/help/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/components/forgotPassword/index.js",[],"/Users/shelbyd/CODING/CA/Assignments/T3A2_MERN/client/src/store.js",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":64,"column":10,"nodeType":"234","endLine":64,"endColumn":12,"suggestions":"235"},{"ruleId":"232","severity":1,"message":"236","line":108,"column":6,"nodeType":"234","endLine":108,"endColumn":8,"suggestions":"237"},{"ruleId":"232","severity":1,"message":"238","line":65,"column":8,"nodeType":"234","endLine":65,"endColumn":10,"suggestions":"239"},{"ruleId":"240","severity":1,"message":"241","line":94,"column":7,"nodeType":"242","endLine":94,"endColumn":33},{"ruleId":"243","severity":1,"message":"244","line":114,"column":13,"nodeType":"242","endLine":114,"endColumn":39},{"ruleId":"240","severity":1,"message":"241","line":114,"column":13,"nodeType":"242","endLine":114,"endColumn":39},{"ruleId":"245","severity":1,"message":"246","line":144,"column":13,"nodeType":"242","endLine":144,"endColumn":62},{"ruleId":"247","severity":1,"message":"248","line":51,"column":10,"nodeType":"249","messageId":"250","endLine":51,"endColumn":17},{"ruleId":"232","severity":1,"message":"233","line":79,"column":6,"nodeType":"234","endLine":79,"endColumn":8,"suggestions":"251"},{"ruleId":"247","severity":1,"message":"252","line":81,"column":9,"nodeType":"249","messageId":"250","endLine":81,"endColumn":15},{"ruleId":"247","severity":1,"message":"253","line":10,"column":30,"nodeType":"249","messageId":"250","endLine":10,"endColumn":45},{"ruleId":"247","severity":1,"message":"254","line":31,"column":61,"nodeType":"249","messageId":"250","endLine":31,"endColumn":69},{"ruleId":"247","severity":1,"message":"255","line":32,"column":21,"nodeType":"249","messageId":"250","endLine":32,"endColumn":24},{"ruleId":"247","severity":1,"message":"256","line":32,"column":47,"nodeType":"249","messageId":"250","endLine":32,"endColumn":55},{"ruleId":"232","severity":1,"message":"257","line":97,"column":7,"nodeType":"234","endLine":97,"endColumn":9,"suggestions":"258"},{"ruleId":"232","severity":1,"message":"259","line":55,"column":5,"nodeType":"234","endLine":55,"endColumn":7,"suggestions":"260"},{"ruleId":"232","severity":1,"message":"259","line":65,"column":6,"nodeType":"234","endLine":65,"endColumn":8,"suggestions":"261"},{"ruleId":"232","severity":1,"message":"262","line":59,"column":9,"nodeType":"234","endLine":59,"endColumn":11,"suggestions":"263"},{"ruleId":"232","severity":1,"message":"264","line":85,"column":6,"nodeType":"234","endLine":85,"endColumn":8,"suggestions":"265"},{"ruleId":"247","severity":1,"message":"266","line":1,"column":27,"nodeType":"249","messageId":"250","endLine":1,"endColumn":36},{"ruleId":"228","replacedBy":"267"},{"ruleId":"230","replacedBy":"268"},{"ruleId":"247","severity":1,"message":"269","line":16,"column":10,"nodeType":"249","messageId":"250","endLine":16,"endColumn":17},{"ruleId":"247","severity":1,"message":"254","line":17,"column":10,"nodeType":"249","messageId":"250","endLine":17,"endColumn":18},{"ruleId":"247","severity":1,"message":"270","line":19,"column":45,"nodeType":"249","messageId":"250","endLine":19,"endColumn":56},{"ruleId":"247","severity":1,"message":"271","line":19,"column":58,"nodeType":"249","messageId":"250","endLine":19,"endColumn":63},{"ruleId":"247","severity":1,"message":"272","line":20,"column":3,"nodeType":"249","messageId":"250","endLine":20,"endColumn":14},{"ruleId":"247","severity":1,"message":"273","line":20,"column":16,"nodeType":"249","messageId":"250","endLine":20,"endColumn":27},{"ruleId":"247","severity":1,"message":"274","line":5,"column":8,"nodeType":"249","messageId":"250","endLine":5,"endColumn":26},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.","ArrayExpression",["277"],"React Hook useEffect has missing dependencies: 'actions' and 'formik'. Either include them or remove the dependency array.",["278"],"React Hook useEffect has a missing dependency: 'getSavedHandler'. Either include it or remove the dependency array.",["279"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'checked' is assigned a value but never used.","Identifier","unusedVar",["280"],"'formik' is assigned a value but never used.","'getSingleRecipe' is defined but never used.","'recipeID' is assigned a value but never used.","'_id' is assigned a value but never used.","'username' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions', 'checkSingleRecipeLocal', and 'id'. Either include them or remove the dependency array.",["281"],"React Hook useEffect has missing dependencies: 'actions' and 'history'. Either include them or remove the dependency array.",["282"],["283"],"React Hook useEffect has missing dependencies: 'actions', 'history', and 'token'. Either include them or remove the dependency array.",["284"],"React Hook useEffect has a missing dependency: 'recipeSearchHandler'. Either include it or remove the dependency array.",["285"],"'useEffect' is defined but never used.",["275"],["276"],"'loading' is assigned a value but never used.","'veryHealthy' is assigned a value but never used.","'cheap' is assigned a value but never used.","'veryPopular' is assigned a value but never used.","'sustainable' is assigned a value but never used.","'SearchRecipeButton' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"286","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"295","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [actions]",{"range":"302","text":"303"},"Update the dependencies array to be: [actions, formik]",{"range":"304","text":"305"},"Update the dependencies array to be: [getSavedHandler]",{"range":"306","text":"307"},{"range":"308","text":"303"},"Update the dependencies array to be: [actions, checkSingleRecipeLocal, id]",{"range":"309","text":"310"},"Update the dependencies array to be: [actions, history]",{"range":"311","text":"312"},{"range":"313","text":"312"},"Update the dependencies array to be: [actions, history, token]",{"range":"314","text":"315"},"Update the dependencies array to be: [recipeSearchHandler]",{"range":"316","text":"317"},[1940,1942],"[actions]",[3092,3094],"[actions, formik]",[2428,2430],"[getSavedHandler]",[2567,2569],[3567,3569],"[actions, checkSingleRecipeLocal, id]",[1939,1941],"[actions, history]",[2080,2082],[1715,1717],"[actions, history, token]",[3121,3123],"[recipeSearchHandler]"]