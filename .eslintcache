[{"/Users/Adrienne/Desktop/MERN/mern-client/src/index.js":"1","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers.js":"2","/Users/Adrienne/Desktop/MERN/mern-client/src/reportWebVitals.js":"3","/Users/Adrienne/Desktop/MERN/mern-client/src/App.js":"4","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/preferences/index.js":"5","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/login/index.js":"6","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/modals/index.js":"7","/Users/Adrienne/Desktop/MERN/mern-client/src/components/nav/index.js":"8","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/index.js":"9","/Users/Adrienne/Desktop/MERN/mern-client/src/components/userSettings/index.js":"10","/Users/Adrienne/Desktop/MERN/mern-client/src/components/home/index.js":"11","/Users/Adrienne/Desktop/MERN/mern-client/src/components/fridge/index.js":"12","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/list.js":"13","/Users/Adrienne/Desktop/MERN/mern-client/src/config/api.js":"14","/Users/Adrienne/Desktop/MERN/mern-client/src/components/AuthenticationModal/index.js":"15","/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js":"16","/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js":"17","/Users/Adrienne/Desktop/MERN/mern-client/src/utils/get-user-preferences/index.js":"18","/Users/Adrienne/Desktop/MERN/mern-client/src/components/notFound/index.js":"19","/Users/Adrienne/Desktop/MERN/mern-client/src/components/ingredientAutocomplete/index.js":"20","/Users/Adrienne/Desktop/MERN/mern-client/src/components/searchButton/index.js":"21","/Users/Adrienne/Desktop/MERN/mern-client/src/components/logo/index.js":"22","/Users/Adrienne/Desktop/MERN/mern-client/src/services/authServices.js":"23","/Users/Adrienne/Desktop/MERN/mern-client/src/components/pantry/index.js":"24","/Users/Adrienne/Desktop/MERN/mern-client/src/components/browseRecipes/index.js":"25","/Users/Adrienne/Desktop/MERN/mern-client/src/components/footer/index.js":"26","/Users/Adrienne/Desktop/MERN/mern-client/src/components/savedRecipes/index.js":"27","/Users/Adrienne/Desktop/MERN/mern-client/src/components/singleRecipe/index.js":"28","/Users/Adrienne/Desktop/MERN/mern-client/src/components/ingredient/index.js":"29","/Users/Adrienne/Desktop/MERN/mern-client/src/components/listedRecipe/index.js":"30","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/recipes/index.js":"31","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/userInfo/index.js":"32","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/ingredients/index.js":"33","/Users/Adrienne/Desktop/MERN/mern-client/src/components/styles/makeStyles.js":"34","/Users/Adrienne/Desktop/MERN/mern-client/src/data/testBrowseRecipeData.js":"35","/Users/Adrienne/Desktop/MERN/mern-client/src/services/ingredientServices.js":"36","/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/errors/index.js":"37","/Users/Adrienne/Desktop/MERN/mern-client/src/components/profileImage/index.js":"38","/Users/Adrienne/Desktop/MERN/mern-client/src/services/recipeServices.js":"39","/Users/Adrienne/Desktop/MERN/mern-client/src/components/loading/index.js":"40","/Users/Adrienne/Desktop/MERN/mern-client/src/data/testSaveRecipeData.js":"41","/Users/Adrienne/Desktop/MERN/mern-client/src/components/forgotPassword/index.js":"42","/Users/Adrienne/Desktop/MERN/mern-client/src/components/resetPassword/index.js":"43","/Users/Adrienne/Desktop/MERN/mern-client/src/components/noItemsPage/index.js":"44","/Users/Adrienne/Desktop/MERN/mern-client/src/components/carousel/index.js":"45","/Users/Adrienne/Desktop/MERN/mern-client/src/components/help/index.js":"46","/Users/Adrienne/Desktop/MERN/mern-client/src/store.js":"47"},{"size":663,"mtime":1611037958450,"results":"48","hashOfConfig":"49"},{"size":523,"mtime":1609328906867,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":1607645433153,"results":"51","hashOfConfig":"49"},{"size":3525,"mtime":1611040277371,"results":"52","hashOfConfig":"49"},{"size":602,"mtime":1611038659771,"results":"53","hashOfConfig":"49"},{"size":783,"mtime":1611038651970,"results":"54","hashOfConfig":"49"},{"size":459,"mtime":1608592858540,"results":"55","hashOfConfig":"49"},{"size":6607,"mtime":1611038259346,"results":"56","hashOfConfig":"49"},{"size":6568,"mtime":1611038371172,"results":"57","hashOfConfig":"49"},{"size":10052,"mtime":1611040218597,"results":"58","hashOfConfig":"49"},{"size":1649,"mtime":1611038094948,"results":"59","hashOfConfig":"49"},{"size":5520,"mtime":1611029010274,"results":"60","hashOfConfig":"49"},{"size":353,"mtime":1610877222427,"results":"61","hashOfConfig":"49"},{"size":379,"mtime":1610973643856,"results":"62","hashOfConfig":"49"},{"size":1389,"mtime":1610973667016,"results":"63","hashOfConfig":"49"},{"size":7507,"mtime":1611038434138,"results":"64","hashOfConfig":"49"},{"size":5219,"mtime":1611038216437,"results":"65","hashOfConfig":"49"},{"size":224,"mtime":1609832983316,"results":"66","hashOfConfig":"49"},{"size":1401,"mtime":1610877222417,"results":"67","hashOfConfig":"49"},{"size":5096,"mtime":1611038192481,"results":"68","hashOfConfig":"49"},{"size":1082,"mtime":1610877222434,"results":"69","hashOfConfig":"49"},{"size":327,"mtime":1610877222414,"results":"70","hashOfConfig":"49"},{"size":3309,"mtime":1611038882320,"results":"71","hashOfConfig":"49"},{"size":5470,"mtime":1611038312703,"results":"72","hashOfConfig":"49"},{"size":7062,"mtime":1611042076842,"results":"73","hashOfConfig":"49"},{"size":218,"mtime":1610973667074,"results":"74","hashOfConfig":"49"},{"size":5749,"mtime":1611040218568,"results":"75","hashOfConfig":"49"},{"size":11226,"mtime":1611041221204,"results":"76","hashOfConfig":"49"},{"size":4384,"mtime":1610973636514,"results":"77","hashOfConfig":"49"},{"size":5101,"mtime":1611041972528,"results":"78","hashOfConfig":"49"},{"size":710,"mtime":1611038673780,"results":"79","hashOfConfig":"49"},{"size":855,"mtime":1611038725540,"results":"80","hashOfConfig":"49"},{"size":877,"mtime":1611038633614,"results":"81","hashOfConfig":"49"},{"size":385,"mtime":1610015725917,"results":"82","hashOfConfig":"49"},{"size":31978,"mtime":1609246365356,"results":"83","hashOfConfig":"49"},{"size":2221,"mtime":1611038919786,"results":"84","hashOfConfig":"49"},{"size":418,"mtime":1609328906867,"results":"85","hashOfConfig":"49"},{"size":2708,"mtime":1611040218601,"results":"86","hashOfConfig":"49"},{"size":1672,"mtime":1611038901467,"results":"87","hashOfConfig":"49"},{"size":400,"mtime":1610877222411,"results":"88","hashOfConfig":"49"},{"size":626,"mtime":1610015725919,"results":"89","hashOfConfig":"49"},{"size":4219,"mtime":1611038043571,"results":"90","hashOfConfig":"49"},{"size":6169,"mtime":1611038460568,"results":"91","hashOfConfig":"49"},{"size":1402,"mtime":1610877222417,"results":"92","hashOfConfig":"49"},{"size":3922,"mtime":1611037994175,"results":"93","hashOfConfig":"49"},{"size":4197,"mtime":1610973667085,"results":"94","hashOfConfig":"49"},{"size":245,"mtime":1610973667135,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qepo1n",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"100"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"/Users/Adrienne/Desktop/MERN/mern-client/src/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers.js",[],["203","204"],"/Users/Adrienne/Desktop/MERN/mern-client/src/reportWebVitals.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/App.js",["205"],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/preferences/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/login/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/modals/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/nav/index.js",["206","207","208","209","210","211"],"import React, { Fragment, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./nav.module.css\";\n\nimport SearchRecipeButton from \"../searchButton\";\nimport AuthenticationModal from \"../AuthenticationModal\";\nimport { logoutUser, getProfile } from \"../../services/authServices\";\n\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Fadein from \"@material-ui/core/Fade\";\nimport HelpIcon from \"@material-ui/icons/Help\";\n\n//IMAGES-icons\nimport fridge from \"../styles/imgs/fridge.png\";\nimport pantry from \"../styles/imgs/pantry.png\";\nimport pref from \"../styles/imgs/preference.png\";\nimport list from \"../styles/imgs/list.png\";\nimport ProfileDefault from \"../styles/imgs/profileDefault.png\";\n\n//FOOD IMAGES\nimport carrot from \"../styles/imgs/carrot.png\";\nimport chilli from \"../styles/imgs/chilli.png\";\nimport corn from \"../styles/imgs/corn.png\";\nimport egg from \"../styles/imgs/egg.png\";\nimport garlic from \"../styles/imgs/garlic.png\";\nimport radish from \"../styles/imgs/radish.png\";\nimport ramen from \"../styles/imgs/ramen.png\";\nimport tomato from \"../styles/imgs/tomato.png\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst NavBar = ({\n  actions,\n  userLoggedIn,\n  currentUserSettings,\n  currentProfile,\n}) => {\n  let history = useHistory();\n  const { setModalOpen } = actions;\n  const listFoodImg = [\n    carrot,\n    chilli,\n    corn,\n    egg,\n    garlic,\n    radish,\n    ramen,\n    tomato,\n  ];\n  let randomFoodImg =\n    listFoodImg[Math.floor(Math.random() * listFoodImg.length)];\n\n  function handleLogout() {\n    logoutUser()\n      .then((r) => {\n        history.push(\"/\");\n        toast.success(\"Come back soon!\");\n      })\n      .catch((error) => {\n        toast.error(\"Oh no, error loggin out!\", error);\n        console.log(\n          \"The server may be down - caught an exception on logout:\",\n          error\n        );\n      });\n\n    //clear storage if error\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"fridge\");\n    localStorage.removeItem(\"pantry\");\n    localStorage.removeItem(\"browsedRecipes\");\n    localStorage.removeItem(\"savedRecipes\");\n    localStorage.removeItem(\"singleRecipe\");\n    localStorage.removeItem(\"profile\");\n    actions.removeProfile();\n    actions.logout();\n  }\n\n  return (\n    <div class={styles.navBox}>\n      <AuthenticationModal />\n      <a class={styles.trigger}>\n        <i>\n          <MoreVertIcon fontSize=\"large\" />\n        </i>\n      </a>\n      <Fadein in={true} timeout={2000}>\n        <nav class={styles.nav}>\n          <ul>\n            <li>\n              <Link to={\"/user/\" + userLoggedIn + \"/account-settings\"}>\n                <div class={styles.userProfile}>\n                  {currentProfile ? (\n                    <img alt=\"profile of user\" src={currentProfile} />\n                  ) : (\n                    <img alt=\"profile default of user\" src={ProfileDefault} />\n                  )}\n                  {userLoggedIn ? <div>{userLoggedIn}</div> : <div></div>}\n                </div>\n              </Link>\n            </li>\n            <li>\n              <SearchRecipeButton />\n              <a class={styles.navLink}></a>\n            </li>\n            <li>\n              <Link\n                to={\"/ingredients/\" + userLoggedIn + \"/fridge\"}\n                class={styles.navLink}\n              >\n                <img alt=\"Fridge\" src={fridge} />\n                <div>My Fridge</div>\n              </Link>\n            </li>\n            <li>\n              <Link\n                to={`/ingredients/${userLoggedIn}/pantry`}\n                class={styles.navLink}\n              >\n                <img alt=\"Pantry\" src={pantry} />\n                <div>Pantry Staples</div>\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/recipes/saved-recipes\" class={styles.navLink}>\n                <img alt=\"list\" src={list} />\n                <div>Saved Recipes</div>\n              </Link>\n            </li>\n            <li>\n              <Link to={\"/preferences/\" + userLoggedIn} class={styles.navLink}>\n                <img alt=\"preference\" src={pref} />\n                <div> My Preferences</div>\n              </Link>\n            </li>\n            <li class={styles.foodPic}>\n              <img alt=\"picture of food\" src={randomFoodImg} />\n            </li>\n            <li class={styles.navButtons}>\n              <Fragment>\n                {userLoggedIn ? (\n                  <Fragment>\n                    {\" \"}\n                    <Button\n                      variant=\"outlined\"\n                      class={styles.navButtonstyle}\n                      onClick={handleLogout}\n                    >\n                      Log out\n                    </Button>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <Button\n                      variant=\"outlined\"\n                      class={styles.navButtonstyle}\n                      onClick={() => setModalOpen(\"login\")}\n                    >\n                      Login\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      class={styles.navButtonstyle}\n                      onClick={() => setModalOpen(\"register\")}\n                    >\n                      Register\n                    </Button>\n                  </Fragment>\n                )}\n              </Fragment>\n            </li>\n            <li style={{ textAlign: \"left\", padding: \"10px\" }}>\n              <Button onClick={() => setModalOpen(\"help\")}>\n                <HelpIcon />\n              </Button>\n            </li>\n          </ul>\n        </nav>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n  currentUserSettings: state.currentUserSettings,\n  currentProfile: state.currentUserSettings.profile,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n    logIn: () => dispatch({ type: \"login\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n    removeProfile: () => dispatch({ type: \"removeProfile\" }),\n    updateProfile: ({ profile }) =>\n      dispatch({ type: \"updateProfile\", payload: { profile } }),\n  },\n});\n\n// export default navBar;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/index.js",["212","213","214"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Field, Form, useFormik } from \"formik\";\n\nimport { preferencesList, preferencesName } from \"./list\";\n\nimport {\n  getPreference,\n  updatePreference,\n  getUsername,\n  getPref,\n  setPref,\n} from \"../../services/authServices\";\n\nimport Logo from \"../logo\";\nimport Loading from \"../loading\";\n\nimport styles from \"./preferences.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport pantrycartoon from \"../styles/imgs/pantrycartoon.png\";\n\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from \"@material-ui/core/Fade\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\nconst validate = (values) => {\n  const errors = {};\n  if (values.userPreferences === true) {\n    errors.userPreferences = \"Invalid\";\n  } else if (values.userPreferences === false) {\n    errors.userPreferences = \"Invalid\";\n  }\n  return errors;\n};\n\n// preferences component, is passed:\n// userPreferences which is state?\n// actions: which is submit (to db) and get payload/data from db.\nconst Preferences = ({ actions, userPreferences, userLoggedIn }) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [checked, setChecked] = useState(null);\n  const [loading, setloading] = useState({ done: false });\n\n  // On page load- This is calling the DB get request to get the initial user preference data\n  useEffect(() => {\n    getPreference(getUsername())\n      .then((pref) => {\n        setPref({ ...pref });\n        actions.updatePreferences(JSON.parse(getPref()));\n        setChecked(JSON.parse(getPref()));\n      })\n      .catch((error) => {\n        if (error.response && error.response.status === 404)\n          toast.error(\"Sorry we could not get your information at this time.\");\n        else\n          toast.error(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n    setTimeout(() => {\n      setloading({ done: true });\n    }, 3000);\n  }, []);\n\n  const formik = useFormik({\n    //calls boolean validation\n    validate,\n  });\n\n  function submitHandler(values) {\n    setloading({ done: false });\n    updatePreference({ ...values }, getUsername())\n      .then((pref) => {\n        setPref(pref);\n        actions.updatePreferences(pref);\n        setTimeout(() => {\n          setloading({ done: true });\n          history.push(\"/preferences/\" + getUsername());\n          toast.success(\n            \"Preferences Updated, maybe refresh your recipe search!\"\n          );\n        }, 3000);\n      })\n      .catch((error) => {\n        if (error.response && error.response.status === 404)\n          toast.error(\"Sorry we could not submit your request at this time.\");\n        else\n          toast.error(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  }\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true} timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>Preferences</h1>\n            </Grid>\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                {!loading.done ? (\n                  <Loading />\n                ) : (\n                  <>\n                    <div class={appstyles.subheading}>\n                      Select from the preferences below and we will only show\n                      you recipes that match.\n                    </div>\n                    <div className={styles.prefBox}>\n                      <div class={styles.formBox}>\n                        <Formik\n                          initialValues={{\n                            vegetarian: userPreferences.vegetarian,\n                            vegan: userPreferences.vegan,\n                            glutenFree: userPreferences.glutenFree,\n                            dairyFree: userPreferences.dairyFree,\n                            veryHealthy: userPreferences.veryHealthy,\n                            cheap: userPreferences.cheap,\n                            veryPopular: userPreferences.veryPopular,\n                            sustainable: userPreferences.sustainable,\n                          }}\n                          onSubmit={async (values) => {\n                            await sleep(500);\n                            submitHandler(values);\n                          }}\n                        >\n                          {({ values }) => (\n                            <Form>\n                              {/* form maps over list in ./list.js, can update more easily if needed */}\n                              {preferencesList.map((preference, index) => (\n                                <label key={index}>\n                                  <Field type=\"checkbox\" name={preference} />\n                                  <span class={styles.prefItem}>\n                                    {preferencesName[index]}\n                                  </span>\n                                </label>\n                              ))}\n                              <Button class={styles.updateButton} type=\"submit\">\n                                Update Preferences\n                              </Button>\n                            </Form>\n                          )}\n                        </Formik>\n                      </div>\n                      <div class={styles.imgBox}>\n                        <img alt=\"cartoon ingredients\" src={pantrycartoon} />\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\n//checks state\nconst mapStateToProps = (state) => ({\n  userPreferences: state.userPreferences.preferences,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\n//updates state\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    updatePreferences: (data) =>\n      dispatch({ type: \"updatePreferences\", payload: data }),\n    submit: () => dispatch({ type: \"submit\" }),\n  },\n});\n\n//sends to reducer\nexport default connect(mapStateToProps, mapDispatchToProps)(Preferences);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/userSettings/index.js",["215"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./userSettings.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport {\n  getUserSettings,\n  updateUserSettings,\n  getUsername,\n  setUsername,\n  setProfile,\n} from \"../../services/authServices\";\n\nimport ProfileImage from \"../profileImage\";\nimport Logo from \"../logo\";\nimport Loading from \"../loading\";\n\nimport ProfileDefault from \"../styles/imgs/profileDefault.png\";\n\nimport Fade from \"react-reveal/Fade\";\n//MATERIAL\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from \"@material-ui/core/Fade\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.username) {\n    errors.username = \"Required\";\n  } else if (values.username.length > 15) {\n    errors.username = \"Must be 15 characters or less\";\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.password\n    )\n  ) {\n    errors.password =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.confirmPassword\n    )\n  ) {\n    errors.confirmPassword =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match.\";\n  }\n\n  return errors;\n};\n\nconst UserSettings = ({ actions, currentUserSettings, userLoggedIn }) => {\n  const classes = useStyles();\n  const [loading, setloading] = useState({ done: false });\n \n  const text = {\n    color: \"red\",\n    marginLeft: \"10px\",\n  };\n\n  let history = useHistory();\n  useEffect(() => {\n    getUserSettings(getUsername())\n      .then((user) => {\n        actions.settings(user);\n        actions.updateUsername(user.username);\n        setProfile(user.profile);\n        setUsername(user.username);\n      })\n      .then(() => {})\n      .catch((error) => {\n        if (error.response && error.response.status === 404)\n          formik.setStatus(\n            \"Sorry we could not get your information at this time.\"\n          );\n        else\n          formik.setStatus(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n    setTimeout(() => {\n      setloading({ done: true });\n    }, 4000);\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n\n      email: \"\",\n\n      password: \"\",\n\n      confirmPassword: \"\",\n    },\n\n    validate,\n\n    onSubmit: (values) => {\n      setloading({ done: false });\n      updateUserSettings({ ...values }, userLoggedIn)\n        .then((user) => {\n          actions.settings({ ...user });\n          actions.updateUsername(user.username);\n          setUsername(user.username);\n          setProfile(user.profile);\n          history.push(\"/user/\" + getUsername() + \"/account-settings\");\n          toast.success(\"User information updated!\");\n        })\n        .catch((error) => {\n          toast.error(\"Oh no, error!\");\n          if (error.response && error.response.status === 404)\n            formik.setStatus(\n              \"Sorry we could not submit your request at this time.\"\n            );\n          else\n            formik.setStatus(\n              \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n        });\n      setTimeout(() => {\n        setloading({ done: true });\n      }, 3000);\n    },\n  });\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true} timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>Account Settings</h1>\n            </Grid>\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                {!loading.done ? (\n                  <Loading />\n                ) : (\n                  <>\n                    <div class={appstyles.subheading}>\n                      Update your account settings below.\n                    </div>\n\n                    <div class={styles.settingsBox}>\n                      <Fade bottom>\n                        {formik.status && (\n                          <div style={text}>Error: {formik.status}. </div>\n                        )}\n                      </Fade>\n                      <form onSubmit={formik.handleSubmit}>\n                        <div class={styles.profileBox}>\n                          {currentUserSettings.profile ? (\n                            <img\n                              alt=\"profile of user\"\n                              src={currentUserSettings.profile}\n                            />\n                          ) : (\n                            <img alt=\"default profile \" src={ProfileDefault} />\n                          )}\n                        </div>\n                        <label htmlFor=\"photo\" class={styles.profileBox}>\n                          Update Profile Picture\n                        </label>\n                        <div class={styles.fileBox}>\n                          <ProfileImage />\n                        </div>\n                        <label htmlFor=\"username\">Username</label>\n\n                        <input\n                          id=\"userSettingsName\"\n                          name=\"username\"\n                          type=\"text\"\n                          placeholder={currentUserSettings.username}\n                          onChange={formik.handleChange}\n                          onBlur={formik.handleBlur}\n                          value={formik.values.username}\n                        />\n\n                        {formik.touched.username && formik.errors.username ? (\n                          <Fade bottom>\n                            <div style={text}>{formik.errors.username}</div>\n                          </Fade>\n                        ) : null}\n\n                        <label htmlFor=\"email\">Email Address</label>\n\n                        <input\n                          id=\"userSettingsEmail\"\n                          name=\"email\"\n                          type=\"email\"\n                          placeholder={currentUserSettings.email}\n                          onChange={formik.handleChange}\n                          onBlur={formik.handleBlur}\n                          value={formik.values.email}\n                        />\n\n                        {formik.touched.email && formik.errors.email ? (\n                          <Fade bottom>\n                            <div style={text}>{formik.errors.email}</div>\n                          </Fade>\n                        ) : null}\n\n                        <label htmlFor=\"password\">Password</label>\n\n                        <input\n                          id=\"userSettingsPassword\"\n                          name=\"password\"\n                          type=\"password\"\n                          placeholder=\"Password\"\n                          onChange={formik.handleChange}\n                          onBlur={formik.handleBlur}\n                          value={formik.values.password}\n                        />\n\n                        {formik.touched.password && formik.errors.password ? (\n                          <Fade bottom>\n                            <div style={text}>{formik.errors.password}</div>\n                          </Fade>\n                        ) : null}\n\n                        <label htmlFor=\"confirmPassword\">Password</label>\n\n                        <input\n                          id=\"userSettingsConfirmPassword\"\n                          name=\"confirmPassword\"\n                          type=\"password\"\n                          placeholder=\"Retype Password\"\n                          onChange={formik.handleChange}\n                          onBlur={formik.handleBlur}\n                          value={formik.values.confirmPassword}\n                        />\n\n                        {formik.touched.confirmPassword &&\n                        formik.errors.confirmPassword ? (\n                          <Fade bottom>\n                            <div style={text}>\n                              {formik.errors.confirmPassword}\n                            </div>\n                          </Fade>\n                        ) : null}\n\n                        <Button\n                          variant=\"contained\"\n                          class={styles.updateButton}\n                          type=\"submit\"\n                        >\n                          Update Details\n                        </Button>\n                      </form>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentUserSettings: state.currentUserSettings,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    settings: ({ email, username, profile }) =>\n      dispatch({ type: \"settings\", payload: { email, username, profile } }),\n    updateUsername: (username) =>\n      dispatch({ type: \"updateUsername\", payload: username }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettings);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/home/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/fridge/index.js",["216"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  deleteAllFridge,\n  getAllFridgeIngredients,\n  getFridge,\n  setFridge,\n} from \"../../services/ingredientServices\";\nimport { getUsername } from \"../../services/authServices\";\n\nimport styles from \"./fridge.module.css\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport AutocompleteIngredients from \"../ingredientAutocomplete\";\nimport Ingredients from \"../ingredient\";\nimport NoIngredients from \"../noItemsPage\";\nimport Logo from \"../logo\";\nimport SearchRecipeButton from \"../searchButton\";\nimport Loading from \"../loading\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Fadein from \"@material-ui/core/Fade\";\n\nimport fridge from \"../styles/imgs/fridge.png\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Fridge = ({ actions, fridgeIngredients }) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [errors, setErrors] = useState(null);\n  const [loading, setloading] = useState({ done: false });\n\n  const checker = getFridge();\n\n  useEffect(() => {\n    getAllFridgeIngredients(getUsername()).then((res) => {\n                actions.addToFridge(res.fridgeIngredients)\n                setFridge(res.fridgeIngredients)\n                history.push(\"/ingredients/\"+getUsername()+\"/fridge\")\n            }).catch((error) => {\n                if (error.response && error.response.status === 401)\n                toast.error(\"Error getting fridge ingredients\")\n                else   \n                toast.error(\"There may be a problem with the server. Please try again after a few moments.\")\n            })    \n      setTimeout(() => {  \n      setloading({ done: true })\n            }, 4000);\n  },[])\n\n\n  const handleClearFridge = async () => {\n    deleteAllFridge(getUsername())\n      .then((r) => {\n        actions.clearFridge();\n        setFridge();\n        history.push(\"/ingredients/\" + getUsername() + \"/fridge\");\n        toast.warn(\"You have no ingredients left in your fridge!\");\n      })\n      .catch((error) => {\n        toast.error(\"Oh no, error!\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Error clearing your Fridge\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true} timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>My Fridge</h1>\n              <div class={styles.searchButtonMove}>\n                <SearchRecipeButton />\n              </div>\n            </Grid>\n\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                {errors && <div>Error: {errors}</div>}\n                {!loading.done ? (\n                  <Loading />\n                ) : (\n                  <>\n                    <div class={appstyles.subheading}>\n                      Add ingredients to your Fridge Below and we will use them\n                      to find you recipes!\n                    </div>\n\n                    <div class={styles.fridgeAutoBox}>\n                      <AutocompleteIngredients type=\"fridge\" />\n                      <div class={styles.fridge}>\n                        {\" \"}\n                        <img alt=\"Fridge cartoon\" src={fridge} />\n                      </div>\n                    </div>\n                    <Grid\n                      container\n                      spacing={1}\n                      wrap=\"wrap\"\n                      alignItems=\"center\"\n                      justify=\"center\"\n                      class={styles.background}\n                    >\n                      {checker ? (\n                        <Ingredients ingredients={fridgeIngredients} />\n                      ) : (\n                        <NoIngredients type=\"fridge\" image={fridge} />\n                      )}\n                    </Grid>\n                    {checker ? (\n                      <div className={styles.button}>\n                        <Button\n                          variant=\"outlined\"\n                          width=\"100px\"\n                          onClick={() => {\n                            handleClearFridge();\n                          }}\n                        >\n                          Clear All Fridge Contents\n                        </Button>\n                      </div>\n                    ) : (\n                      <div></div>\n                    )}\n                  </>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  fridgeIngredients: state.userIngredients.fridgeIngredients,\n  error: state.errorsMessages,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    addToFridge: (ingredients) =>\n      dispatch({ type: \"fridgeIngredients\", payload: ingredients }),\n    clearFridge: () => dispatch({ type: \"deleteAllFridge\" }),\n    changeError: (error) => dispatch({ type: \"error\", payload: error }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Fridge);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/preferences/list.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/config/api.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/AuthenticationModal/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/register/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/login/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/utils/get-user-preferences/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/notFound/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/ingredientAutocomplete/index.js",["217"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./auto.module.css\";\nimport ingredients from \"../../data/ingredients.json\";\nimport pantry from \"../../data/pantry.json\";\n\nimport {\n  addFridgeItem,\n  addPantryItem,\n  setFridge,\n  setPantry,\n} from \"../../services/ingredientServices\";\nimport { getUsername } from \"../../services/authServices\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction AutocompleteIngredients({\n  actions,\n  fridgeIngredients,\n  pantryIngredients,\n  type,\n  username,\n}) {\n  const isFridge = type === \"fridge\";\n  //removes selected ingredient from list of ingredients to add\n\n  const filteredFridge = fridgeIngredients\n    ? ingredients.filter(\n        (ingredient) => !fridgeIngredients.includes(ingredient.name)\n      )\n    : ingredients;\n\n  const filteredPantry = pantryIngredients\n    ? pantry.filter((i) => !pantryIngredients.includes(i.name))\n    : pantry;\n\n  const filteredList = isFridge ? filteredFridge : filteredPantry;\n\n  let history = useHistory();\n\n  const [values, setValues] = useState([]);\n  const [errors, setErrors] = useState(null);\n\n  function handleAddFridge(event) {\n    const newValues = values.map((i) => i.name);\n\n    addFridgeItem(getUsername(), { item: newValues })\n      .then((res) => {\n        actions.addToFridge(res.fridgeIngredients);\n        setFridge(res.fridgeIngredients);\n        history.push(\"/ingredients/\" + getUsername() + \"/fridge\");\n        toast.success(\n          \" New Fridge Ingredient added, lets search for some recipes!\"\n        );\n        setValues([]);\n      })\n      .catch((error) => {\n        toast.error(\"Oh no error!\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Error adding to your Fridge\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  }\n\n  function handleAddPantry(event) {\n    const newValues = values.map((i) => i.name);\n    addPantryItem(getUsername(), { item: newValues })\n      .then((res) => {\n        actions.addToPantry(res.pantryIngredients);\n        setPantry(res.pantryIngredients);\n        history.push(\"/ingredients/\" + getUsername() + \"/pantry\");\n        toast.success(\" New pantry staple added!\");\n      })\n      .catch((error) => {\n        toast.error(\"Oh no error!\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Error adding to your pantry\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  }\n\n  return (\n    // autocomplete list\n    <div class={styles.autoComplete}>\n      {errors && <div>{errors}</div>}\n      <Autocomplete\n        multiple\n        id=\"tags-standard\"\n        options={filteredList}\n        getOptionLabel={(option) => option.name}\n        filterSelectedOptions=\"true\"\n        onChange={(event, value) => {\n          const filteredValues = _.reject(value, ({ name }) =>\n            _.includes(isFridge ? fridgeIngredients : pantryIngredients, name)\n          );\n          setValues(filteredValues);\n        }}\n        renderInput={(params) => {\n          const filteredAdornment = _.reject(\n            _.get(params, \"InputProps.startAdornment\"),\n            (adornment) => {\n              const {\n                props: { label },\n              } = adornment;\n              return _.includes(\n                isFridge ? fridgeIngredients : pantryIngredients,\n                label\n              );\n            }\n          );\n          _.set(params, \"InputProps.startAdornment\", filteredAdornment);\n\n          return (\n            <TextField\n              inputValue=\"\"\n              {...params}\n              variant=\"standard\"\n              label={`Add Ingredients to your ${type} here`}\n              placeholder=\"Ingredients\"\n            />\n          );\n        }}\n      />\n      <Button\n        class={styles.button}\n        onClick={isFridge ? handleAddFridge : handleAddPantry}\n      >\n        {\" \"}\n        Add Ingredients\n      </Button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  username: state.userLoggedIn.username,\n  fridgeIngredients: state.userIngredients.fridgeIngredients,\n  pantryIngredients: state.userIngredients.pantryIngredients,\n  error: state.errorsMessages,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    addToFridge: (newIngredients) =>\n      dispatch({ type: \"fridgeIngredients\", payload: newIngredients }),\n    addToPantry: (newIngredients) =>\n      dispatch({ type: \"pantryIngredients\", payload: newIngredients }),\n    changeError: (error) => dispatch({ type: \"error\", payload: error }),\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AutocompleteIngredients);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/searchButton/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/logo/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/services/authServices.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/pantry/index.js",["218"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport appstyles from \"../../app.module.css\";\nimport styles from \"./pantry.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\n\nimport {\n  getAllPantryIngredients,\n  deleteAllPantry,\n  setPantry,\n  getPantry,\n} from \"../../services/ingredientServices\";\nimport { getUsername } from \"../../services/authServices\";\n\nimport Logo from \"../logo\";\nimport Ingredients from \"../ingredient\";\nimport NoIngredients from \"../noItemsPage\";\nimport AutocompleteIngredients from \"../ingredientAutocomplete\";\nimport Loading from \"../loading\";\nimport SearchRecipeButton from \"../searchButton\";\n\nimport Fadein from \"@material-ui/core/Fade\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport pantry from \"../styles/imgs/pantry.png\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Pantry = ({ actions, pantryIngredients }) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [errors, setErrors] = useState(null);\n  const [loading, setloading] = useState({ done: false });\n\n  const checker = getPantry();\n\n  useEffect(() => {\n    getAllPantryIngredients(getUsername())\n      .then((res) => {\n        actions.addToPantry(res.pantryIngredients);\n        setPantry(res.pantryIngredients);\n        history.push(\"/ingredients/\" + getUsername() + \"/pantry\");\n      })\n      .catch((error) => {\n        if (error.response && error.response.status === 401)\n          toast.error(\"Sorry we could not get your pantry at this time.\");\n        else\n          toast.error(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n    setTimeout(() => {\n      setloading({ done: true });\n    }, 4000);\n  }, []);\n\n  const handleClearPantry = async () => {\n    deleteAllPantry(getUsername())\n      .then((res) => {\n        actions.clearPantry();\n        setPantry();\n        history.push(\"/ingredients/\" + getUsername() + \"/pantry\");\n        toast.warn(\"You have no staples left in your pantry!\");\n      })\n      .catch((error) => {\n        toast.error(\"Sorry, we could not clear your pantry at this time.\");\n        if (error.response && error.response.status === 401)\n          setErrors(\"Sorry, we could not clear your pantry at this time.\");\n        else\n          setErrors(\n            \"There may be a problem with the server. Please try again after a few moments.\"\n          );\n      });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true} timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>My Pantry Staples</h1>\n              <div class={styles.searchButtonMove}>\n                <SearchRecipeButton />\n              </div>\n            </Grid>\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                {errors && <div>Error: {errors}</div>}\n                {!loading.done ? (\n                  <Loading />\n                ) : (\n                  <>\n                    <div class={appstyles.subheading}>\n                      Add staples to your Pantry Below!\n                    </div>\n                    <div class={styles.pantryAutoBox}>\n                      <AutocompleteIngredients type=\"pantry\" />\n                      <div class={styles.pantry}>\n                        <img alt=\"cartoon pantry \" src={pantry} />\n                      </div>\n                    </div>\n                    <Grid\n                      container\n                      spacing={1}\n                      wrap=\"wrap\"\n                      alignItems=\"center\"\n                      justify=\"center\"\n                      class={styles.background}\n                    >\n                      {checker ? (\n                        <Ingredients ingredients={pantryIngredients} />\n                      ) : (\n                        <NoIngredients type=\"pantry\" image={pantry} />\n                      )}\n                    </Grid>\n                    {checker ? (\n                      <div className={styles.button}>\n                        <Button\n                          variant=\"outlined\"\n                          width=\"100px\"\n                          onClick={() => {\n                            handleClearPantry();\n                          }}\n                        >\n                          Clear All Pantry Contents\n                        </Button>\n                      </div>\n                    ) : (\n                      <div></div>\n                    )}\n                  </>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  pantryIngredients: state.userIngredients.pantryIngredients,\n  error: state.errorsMessages,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    addToPantry: (newIngredients) =>\n      dispatch({ type: \"pantryIngredients\", payload: newIngredients }),\n    clearPantry: () => dispatch({ type: \"deleteAllPantry\" }),\n    changeError: (error) => dispatch({ type: \"error\", payload: error }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pantry);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/browseRecipes/index.js",["219"],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/footer/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/savedRecipes/index.js",["220"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport Logo from \"../logo\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\nimport styles from \"./saved.module.css\";\n\nimport { getAllUserSavedRecipes, getSavedRecipes, setSavedRecipes, removedSavedRecipe } from \"../../services/recipeServices\";\n\nimport ListedRecipe from \"../listedRecipe\";\nimport NoIngredients from \"../noItemsPage\";\nimport Loading from \"../loading\";\n\nimport list from \"../styles/imgs/list.png\";\n//MATERIAL\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from '@material-ui/core/Fade';\nimport Button from \"@material-ui/core/Button\";\n\n//import TestSaveData from \"../../data/testSaveRecipeData\";\n\nimport {toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst SavedRecipes = ({ actions, savedRecipes }) => {\n  const classes = useStyles();\n  let history = useHistory(); \n  const [errors, setErrors] = useState(null);\n  const [savedUserRecipes, setSavedUserRecipes] = useState([]);\n  const [loading, setloading] = useState({ done: false });\n\n\n  const checker = getSavedRecipes();\n  //console.log(checker);\n\n\n  //let TestData = TestSaveData()\n  //console.log(TestData)\n\n  //Call DB to display recipe data\n  async function getSavedHandler() {\n     setloading({ done: false });\n              await getAllUserSavedRecipes()\n                .then((res) => {\n                  setSavedRecipes()\n                  console.log(\"hit saved here\")\n                  console.log(res)\n                  //saved to redux\n                  actions.AddToSavedRecipes(res)\n                  //save to local storage\n                  setSavedRecipes(res)\n                  setSavedUserRecipes(res)\n                  setErrors(\"\")\n                  setTimeout(() => {\n                  setloading({ done: true });\n                  console.log(\"check loading done\");\n                }, 2500);\n                  history.push(\"/recipes/saved-recipes\")\n                })\n                .catch((error) => {\n                  //console.log(\"errors\");\n                  //console.log(error);\n                  if (error.response && error.response.status === 401)\n                  toast.error(\"Sorry we could not get your recipes at this time.\");\n                  else\n                  toast.error( \"There may be a problem with the server. Please try again after a few moments.\");\n                  history.push(\"/recipes/saved-recipes\")\n              });\n        }\n\n    useEffect(() => { \n      getSavedHandler()\n      setSavedUserRecipes(JSON.parse(getSavedRecipes()))\n    }, []);\n\n  \n    //function for removing from saved recipes- this is sent via props to listed recipe\n    function removeSavedRecipeHandler (id) {\n      setloading({ done: false });\n      removedSavedRecipe(id).then((res) => { \n         console.log(res)\n        //setSavedRecipes()\n        setTimeout(() => {\n          setloading({ done: true });\n          //console.log(\"check loading done\");\n        }, 3000);\n        toast.success(\"Removed from Saved Recipes\");\n        history.push(\"/recipes/saved-recipes\")\n      }).then(async (item) => {\n         await getSavedHandler()\n         setSavedUserRecipes(JSON.parse(getSavedRecipes()))\n        }).catch((error) => {\n        //console.log(\"errors\")\n        //console.log(error.response)\n        if (error.response && error.response.status === 401){\n           //setErrors(\"Sorry we could not submit your request at this time.\")\n           toast.error(\"Sorry we could not submit your request at this time.\")\n          } else{\n           //setErrors(\"There may be a problem with the server. Please try again after a few moments.\")\n          toast.error(\"There may be a problem with the server. Please try again after a few moments.\");}\n      });\n\n\n    }\n\n  return (\n    <div className={classes.root}>\n     <Fadein in={true}  timeout={2000}>\n      <Grid container spacing={0}>\n        <Grid container item xs={12} spacing={0}>\n          <Logo />\n          <Grid item xs={12} spacing={2}>\n            <h1 class={appstyles.headings}>Your Saved Recipes</h1>\n            <div class={styles.searchButtonMove}>\n            <Link to={\"/recipes/browse\"}>\n                <Button class={styles.newSearch} >Back to Search </Button>\n            </Link>\n            </div>\n          </Grid>\n          <Grid item xs={12} spacing={2}>\n            <div class={appstyles.layoutContent}>\n                {errors && <div>Error: {errors}</div>}\n                 {!loading.done ? (\n                <Loading />\n              ) : (\n                <>\n                  <div class={styles.possibleStatement}> </div>\n                      <div class={appstyles.subheading} style={{textAlign: \"center\",fontSize: \"1.2em\"}}>Your recipes saved from FridgeMate!</div>\n                         \n                        <div className={styles.savedBox}>\n                          <Grid container spacing={1}  alignItems=\"center\" justify=\"center\" >\n                          {checker ? (\n                              <>\n                                  {savedUserRecipes && savedUserRecipes.map((recipe) => (\n                                  <ListedRecipe key={recipe.title} recipe={recipe} savedType=\"saved recipes\" removeSavedRecipe={removeSavedRecipeHandler}/>\n                                ))} \n                              </>\n                              ) : (\n                                <NoIngredients type=\"recipes\" image={list} />\n                            )}\n                          </Grid>\n                        </div>\n                  </>\n              )}\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n     </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  savedRecipes: state.recipes.savedRecipes,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    settings: ({ email, username, profile }) =>\n      dispatch({ type: \"settings\", payload: { email, username, profile } }),\n    updateUsername: (username) =>\n      dispatch({ type: \"updateUsername\", payload: username }),\n    AddToSavedRecipes: (recipes) =>\n      dispatch({ type: \"savedRecipes\", payload: recipes }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedRecipes);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/singleRecipe/index.js",["221","222","223","224","225"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Logo from \"../logo\";\nimport appstyles from \"../../app.module.css\";\nimport useStyles from \"../styles/makeStyles.js\";\nimport styles from \"./single.module.css\";\n\nimport Loading from \"../loading\";\nimport {\n  getSingleRecipePage,\n  getSingleRecipe,\n  setSingleRecipe,\n} from \"../../services/recipeServices\";\n\n//MATERIAL\nimport Grid from \"@material-ui/core/Grid\";\nimport Fadein from \"@material-ui/core/Fade\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst SingleRecipe = ({ actions, savedRecipes, singleRecipe }) => {\n  const classes = useStyles();\n  const { id } = useParams();\n\n  const [displayRecipe, setDisplayRecipe] = useState(\"\");\n  const [loading, setloading] = useState({ done: false });\n\n  const {\n    cuisines,\n    diets,\n    dishTypes,\n    image,\n    readyInMinutes,\n    recipeID,\n    servings,\n    sourceUrl,\n    title,\n    _id,\n    extendedIngredients,\n    username,\n    vegetarian,\n    vegan,\n    glutenFree,\n    dairyFree,\n    veryHealthy,\n    cheap,\n    veryPopular,\n    sustainable,\n  } = displayRecipe;\n\n  function ingredientFilter(extendedIngredients) {\n    const array = [];\n    extendedIngredients.map((ingredient) => {\n      return array.push(ingredient.name);\n    });\n    const filteredExtendedIngredients = [...new Set(array)];\n    return filteredExtendedIngredients;\n  }\n\n  //get saved receipes from local storage and assign to state first then use that state to display recipes\n  function checkSingleRecipeLocal() {\n    let checker = JSON.parse(localStorage.getItem(\"singleRecipe\"));\n    //\n    if (!checker) {\n      return null;\n    }\n    if (checker.id) {\n      checker.id = checker.id.toString();\n      const exists = Object.values(checker).some(function (k) {\n        return k === id;\n      });\n      return exists;\n    } else if (checker.recipeID) {\n      checker.recipeID = checker.recipeID.toString();\n      const exists = Object.values(checker).some(function (k) {\n        return k === id;\n      });\n      return exists;\n    }\n  }\n\n  useEffect(() => {\n    //if already in local storage, grab from local instead of DB\n    let checkLocal = checkSingleRecipeLocal();\n    if (checkLocal) {\n      let currentSingleRecipe = JSON.parse(\n        localStorage.getItem(\"singleRecipe\")\n      );\n      actions.updateSingleRecipe(currentSingleRecipe);\n      setDisplayRecipe(currentSingleRecipe);\n      setTimeout(() => {\n        setloading({ done: true });\n      }, 5000);\n    } else {\n      getSingleRecipePage(id)\n        .then((recipe) => {\n          let newIng = ingredientFilter(recipe.extendedIngredients);\n          recipe.extendedIngredients = newIng;\n          setDisplayRecipe(recipe);\n          actions.updateSingleRecipe(recipe);\n          setSingleRecipe(recipe);\n          setTimeout(() => {\n            setloading({ done: true });\n          }, 5000);\n        })\n        .catch((error) => {\n          if (error.response && error.response.status === 404) {\n            setloading({ done: false });\n            toast.error(\"Sorry we could not load this recipe at this time.\");\n          } else {\n            setloading({ done: false });\n            toast.error(\n              \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n          }\n        });\n    }\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Fadein in={true} timeout={2000}>\n        <Grid container spacing={0}>\n          <Grid container item xs={12} spacing={0}>\n            <Logo />\n            <Grid item xs={12} spacing={2}>\n              <h1 class={appstyles.headings}>{title}</h1>\n              <div class={styles.searchButtonMove}>\n                {displayRecipe.username ? (\n                  <Link to={\"/recipes/saved-recipes\"}>\n                    <Button class={styles.newSearch}>\n                      Back to Saved Recipes{\" \"}\n                    </Button>\n                  </Link>\n                ) : (\n                  <>\n                    <Link to={\"/recipes/browse\"}>\n                      <Button class={styles.newSearch}>Back to Search </Button>\n                    </Link>\n                  </>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs={12} spacing={2}>\n              <div class={appstyles.layoutContent}>\n                {displayRecipe.username ? (\n                  <div class={appstyles.subheading}>\n                    This recipe is in your Saved Recipes!\n                  </div>\n                ) : (\n                  <>\n                    <div\n                      class={appstyles.subheading}\n                      style={{ alignSelf: \"center\" }}\n                    >\n                      Maybe save this recipe for later?\n                      <Button variant=\"outlined\" class={styles.savedButton}>\n                        Save Recipe!\n                      </Button>\n                    </div>\n                  </>\n                )}\n                {!loading.done ? (\n                  <Loading />\n                ) : (\n                  <>\n                    <div class={styles.singleBox}>\n                      <Grid\n                        container\n                        spacing={1}\n                        wrap=\"wrap\"\n                        alignItems=\"center\"\n                        justify=\"center\"\n                      >\n                        <div class={styles.summaryBox}>\n                          <div class={styles.summaryText}>\n                            <p>\n                              <strong>Serves:</strong> {servings}{\" \"}\n                            </p>\n                            <p>\n                              <strong>Cooking Time:</strong> {readyInMinutes}{\" \"}\n                              mins{\" \"}\n                            </p>\n                            <p>\n                              <strong>Cuisines:</strong>{\" \"}\n                              {cuisines.length !== 0 ? (\n                                <>{cuisines.join(\" , \")}</>\n                              ) : (\n                                <>n/a</>\n                              )}\n                            </p>\n                            <p>\n                              <strong>Dish Types:</strong>{\" \"}\n                              {dishTypes.length !== 0 ? (\n                                <>{dishTypes.join(\" , \")}</>\n                              ) : (\n                                <>n/a</>\n                              )}\n                            </p>\n                            <p>\n                              <strong>Diets:</strong>{\" \"}\n                              {diets.length !== 0 ? (\n                                <>{diets.join(\" , \")}</>\n                              ) : (\n                                <>n/a</>\n                              )}\n                            </p>\n                            <div class={styles.labels}>\n                              {vegetarian ? (\n                                <span class={styles.icons}>Veg</span>\n                              ) : (\n                                <></>\n                              )}\n                              {vegan ? (\n                                <span class={styles.icons}>Vg</span>\n                              ) : (\n                                <></>\n                              )}\n                              {glutenFree ? (\n                                <span class={styles.icons}>Gf</span>\n                              ) : (\n                                <></>\n                              )}\n                              {dairyFree ? (\n                                <span class={styles.icons}>Df</span>\n                              ) : (\n                                <></>\n                              )}\n                              {veryHealthy ? (\n                                <span class={styles.icons}>Very Healthy</span>\n                              ) : (\n                                <></>\n                              )}\n                              {cheap ? (\n                                <span class={styles.icons}>Cheap</span>\n                              ) : (\n                                <></>\n                              )}\n                              {veryPopular ? (\n                                <span class={styles.icons}>Very Popular </span>\n                              ) : (\n                                <></>\n                              )}\n                              {sustainable ? (\n                                <span class={styles.icons}>Sustainable</span>\n                              ) : (\n                                <></>\n                              )}\n                            </div>\n                            <a href={sourceUrl}>\n                              {\" \"}\n                              <p class={styles.url}>\n                                <strong>\n                                  View Source- With Full Instructions\n                                </strong>{\" \"}\n                              </p>\n                            </a>\n                          </div>\n                          <div class={styles.imageBox}>\n                            <img alt=\"recipe\" src={image} />\n                          </div>\n                        </div>\n                        <div class={styles.instructBox}>\n                          <h4>Ingredients</h4>\n\n                          <ul class={styles.ingredientBox}>\n                            {extendedIngredients &&\n                              extendedIngredients.map((ingredient) => (\n                                <li key={ingredient}>\n                                  {\" \"}\n                                  {ingredient.replace(/^\\w/, (c) =>\n                                    c.toUpperCase()\n                                  )}\n                                </li>\n                              ))}\n                          </ul>\n\n                          <h4>Instructions</h4>\n                          <div>\n                            <a href={sourceUrl}>\n                              {\" \"}\n                              <div class={styles.url}>\n                                <strong>\n                                  View Source- With Full Instructions\n                                </strong>{\" \"}\n                              </div>\n                            </a>\n                          </div>\n                        </div>\n                      </Grid>\n                    </div>\n                  </>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fadein>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  savedRecipes: state.recipes.savedRecipes,\n  singleRecipe: state.recipes.singleRecipe,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    updateSingleRecipe: (username) =>\n      dispatch({ type: \"singleRecipe\", payload: username }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleRecipe);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/ingredient/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/listedRecipe/index.js",["226","227","228","229","230"],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/recipes/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/userInfo/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/ingredients/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/styles/makeStyles.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/data/testBrowseRecipeData.js",[],["231","232"],"/Users/Adrienne/Desktop/MERN/mern-client/src/services/ingredientServices.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/reducers/errors/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/profileImage/index.js",["233","234"],"import { uploadProfileImage, getUsername } from \"../../services/authServices\";\nimport { useFormik } from \"formik\";\nimport React, { Fragment, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\n\nimport styles from \"./profile.module.css\";\nimport Loading from \"../loading\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst ProfileImage = ({ actions, userLoggedIn, currentUserSettings }) => {\n  let history = useHistory();\n  const [loading, setloading] = useState({ done: true });\n  \n  const formik = useFormik({\n    initialValues: {\n      file: \"\",\n    },\n\n    onSubmit: (values) => {\n      setloading({ done: false });\n      uploadProfileImage(values.file, userLoggedIn)\n        .then((image) => {\n          const {\n            user: { profile },\n          } = image;\n          actions.updateProfile({ profile });\n          toast.success(\"Profile Picture updated!\");\n        })\n        .catch((error) => {\n          toast.error(\"Oh no!\");\n          if (error.response && error.response.status === 404)\n            formik.setStatus(\n              \"Sorry we could not submit your request at this time.\"\n            );\n          else\n            formik.setStatus(\n              \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n        });\n      setTimeout(() => {\n        setloading({ done: true });\n      }, 4000);\n    },\n  });\n\n  return (\n    <Fragment>\n      <div class={styles.imageUpload}>\n        {!loading.done ? (\n          <div>\n            {\" \"}\n            <Loading />\n          </div>\n        ) : (\n          <form>\n            <input\n              style={{ backgroundColor: \"white\" }}\n              id=\"file\"\n              name=\"file\"\n              type=\"file\"\n              onChange={(event) => {\n                formik.setFieldValue(\"file\", event.currentTarget.files[0]);\n              }}\n            />\n            <Button\n              size=\"small\"\n              type=\"submit\"\n              class={styles.imageUploadButton}\n              onClick={formik.handleSubmit}\n            >\n              Upload\n            </Button>\n          </form>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentUserSettings: state.currentUserSettings.profile,\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    updateProfile: ({ profile }) => {\n      return dispatch({ type: \"updateProfile\", payload: { profile } });\n    },\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileImage);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/services/recipeServices.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/loading/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/data/testSaveRecipeData.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/forgotPassword/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/resetPassword/index.js",["235"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useFormik } from \"formik\";\n\nimport styles from \"../styles/modals.module.css\";\nimport {\n  resetPassword,\n  updatePasswordViaReset,\n} from \"../../services/authServices\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport Button from \"@material-ui/core/Button\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Fade from \"react-reveal/Fade\";\nimport Loading from \"../loading\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (\n    !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/i.test(\n      values.password\n    )\n  ) {\n    errors.password =\n      \"Password must contain 8 characters, with 1 upper and lower case character, 1 number and 1 special character.\";\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n  } else if (values.password !== values.confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match.\";\n  }\n\n  return errors;\n};\n\nconst ResetPassword = ({ actions, user, modalId }) => {\n  let history = useHistory();\n  const { token } = useParams();\n  const [loading, setloading] = useState({ done: true });\n\n  const text = {\n    color: \"red\",\n  };\n  useEffect(() => {\n    resetPassword(token)\n      .then((res) => {\n        actions.setUsername(res.username);\n        setloading({ done: true });\n      })\n      .catch((error) => {\n        toast.error(\"Password reset link is invalid or has expired\");\n        history.push(\"/\");\n      });\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      password: \"\",\n    },\n    validate,\n\n    onSubmit: async (values) => {\n      updatePasswordViaReset({\n        username: user,\n        password: values.password,\n        resetPasswordToken: token,\n      })\n        .then(async (r) => {\n          setloading({ done: false });\n          setTimeout(() => {\n            toast.success(\"Password Updated!\");\n            setloading({ done: true });\n            history.push(\"/\");\n            actions.logout();\n          }, 6000);\n        })\n        .catch((error) => {\n          toast.error(\"Oh no!\");\n          if (error.response && error.response.status === 401)\n            formik.setStatus(\n              \"Sorry, we couldn't update your password at this time.\"\n            );\n          else\n            formik.setStatus(\n              \"There may be a problem with the server. Please try again after a few moments.\"\n            );\n        });\n    },\n  });\n\n  return (\n    <div class={styles.resetBox}>\n      <div class={styles.loginSignupBox}>\n        <h1>Reset Password</h1>\n        <div style={{ alignSelf: \"center\" }}>\n          <LockIcon />\n        </div>\n        {!loading.done ? (\n          <div style={{ maxHeight: \"400px\" }}>\n            <Loading />\n          </div>\n        ) : (\n          <>\n            <div style={{ alignSelf: \"center\" }}>User: {user && user}</div>\n            <form onSubmit={formik.handleSubmit}>\n              {formik.status && (\n                <Fade bottom>\n                  <div style={text}>\n                    Error: {formik.status}. Please try again.\n                  </div>\n                </Fade>\n              )}\n              <label htmlFor=\"password\">Password:</label>\n\n              <input\n                id=\"resetPassword\"\n                class=\"resetPassword\"\n                name=\"password\"\n                placeholder=\"Password (8 + Characters, 1 Lowercase, 1 Uppercase, 1 Number & 1 Special)\"\n                type=\"password\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n              />\n\n              {formik.touched.password && formik.errors.password ? (\n                <Fade bottom>\n                  <div style={text}>{formik.errors.password}</div>\n                </Fade>\n              ) : null}\n\n              <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n\n              <input\n                id=\"resetConfirmPassword\"\n                class=\"resetConfirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Retype Password \"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.confirmPassword}\n              />\n\n              {formik.touched.confirmPassword &&\n              formik.errors.confirmPassword ? (\n                <Fade bottom>\n                  <div style={text}>{formik.errors.confirmPassword}</div>\n                </Fade>\n              ) : null}\n              <div>\n                <Button\n                  variant=\"contained\"\n                  class={styles.loginSignupButtons}\n                  type=\"submit\"\n                  onClick={formik.handleSubmit}\n                >\n                  Reset Password\n                </Button>\n              </div>\n              <div>\n                <div>OR</div>\n                <Button\n                  class={styles.modalButton}\n                  onClick={() => actions.openModal(\"register\")}\n                >\n                  Create New Account\n                </Button>\n                <Button\n                  class={styles.modalCancelButton}\n                  onClick={() => actions.openModal(\"login\")}\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </form>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.userLoggedIn.username,\n  modalId: state.modalOpen.modal,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setUsername: (username) => dispatch({ type: \"login\", payload: username }),\n    openModal: (modalId) => dispatch({ type: \"openModal\", payload: modalId }),\n    closeModal: () => dispatch({ type: \"closeModal\" }),\n    logout: () => dispatch({ type: \"logout\" }),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/noItemsPage/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/components/carousel/index.js",["236"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AutoRotatingCarousel } from \"material-auto-rotating-carousel\";\n\nimport SearchRecipeButton from \"../searchButton\";\nimport fridge from \"../styles/imgs/fridgebackgroundother.jpg\";\nimport pantry from \"../styles/imgs/pantrybackground.jpg\";\nimport recipe from \"../styles/imgs/recipeimage.jpg\";\nimport pref from \"../styles/imgs/supermarket.jpg\";\nimport recipelist from \"../styles/imgs/recipelist2.jpg\";\nimport styles from \"./carousel.module.css\";\nimport { Slide } from \"material-auto-rotating-carousel\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\n\nconst { lightGreen } = require(\"@material-ui/core/colors\");\nconst Button = require(\"@material-ui/core/Button\").default;\n\nconst Carousel = ({ actions }) => {\n  const [state, setState] = useState({ open: false });\n\n  const onCloseHandler = () => {\n    setState({ open: false });\n    actions.setModalOpen(\"register\");\n  };\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: 30 }}>\n      <Button\n        class={styles.ButtonOutline}\n        onClick={() => setState({ open: true })}\n      >\n        Where to start?\n      </Button>\n      <AutoRotatingCarousel\n        label=\"Get started\"\n        open={state.open}\n        onClose={onCloseHandler}\n        onStart={() => setState({ open: false })}\n        style={{ position: \"absolute\" }}\n        ButtonProps={{ color: \"primary\", endIcon: <KeyboardArrowRightIcon /> }}\n      >\n        <Slide\n          media={\n            <img\n              src={fridge}\n              alt=\"fruits and vegetables\"\n              class={styles.slideImage}\n            />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Add Ingredients to your Fridge\"\n          subtitle=\"Cheese, bread, chicken, soy sauce.. any ingredients in your fridge!\"\n        />\n        <Slide\n          media={\n            <img\n              src={pantry}\n              alt=\"pantry ingredients\"\n              class={styles.slideImage}\n            />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Add staples to your Pantry\"\n          subtitle=\"Save your usual pantry staples!\"\n        />\n        <Slide\n          media={\n            <img src={pref} alt=\"grocery store\" class={styles.slideImage} />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Select any diet preferences.\"\n          subtitle=\"Gluten free, dairy free? You can decide! \"\n        />\n        <Slide\n          media={\n            <img src={recipe} alt=\"bowl of food\" class={styles.slideImage} />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Browse recipes!\"\n          subtitle=\"We will show you recipes that include the ingredients from your fridge!\"\n        />\n        <Slide\n          media={\n            <img\n              src={recipelist}\n              alt=\"ipad with recipe on it\"\n              class={styles.slideImage}\n            />\n          }\n          mediaBackgroundStyle={{ backgroundColor: \"white\" }}\n          style={{ backgroundColor: lightGreen[600] }}\n          title=\"Save them for later!\"\n          subtitle=\"Add recipes to your saved collection so you can use them again!\"\n        />\n      </AutoRotatingCarousel>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userLoggedIn: state.userLoggedIn.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: {\n    setModalOpen: (modalId) => {\n      dispatch({ type: \"openModal\", payload: modalId });\n    },\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Carousel);\n","/Users/Adrienne/Desktop/MERN/mern-client/src/components/help/index.js",[],"/Users/Adrienne/Desktop/MERN/mern-client/src/store.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":51,"column":6,"nodeType":"243","endLine":51,"endColumn":8,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"249","line":11,"column":22,"nodeType":"247","messageId":"248","endLine":11,"endColumn":32},{"ruleId":"250","severity":1,"message":"251","line":90,"column":7,"nodeType":"252","endLine":90,"endColumn":33},{"ruleId":"253","severity":1,"message":"254","line":112,"column":15,"nodeType":"252","endLine":112,"endColumn":41},{"ruleId":"250","severity":1,"message":"251","line":112,"column":15,"nodeType":"252","endLine":112,"endColumn":41},{"ruleId":"255","severity":1,"message":"256","line":145,"column":15,"nodeType":"252","endLine":145,"endColumn":64},{"ruleId":"245","severity":1,"message":"257","line":51,"column":10,"nodeType":"247","messageId":"248","endLine":51,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":73,"column":6,"nodeType":"243","endLine":73,"endColumn":8,"suggestions":"258"},{"ruleId":"245","severity":1,"message":"259","line":75,"column":9,"nodeType":"247","messageId":"248","endLine":75,"endColumn":15},{"ruleId":"241","severity":1,"message":"260","line":106,"column":6,"nodeType":"243","endLine":106,"endColumn":8,"suggestions":"261"},{"ruleId":"241","severity":1,"message":"262","line":55,"column":5,"nodeType":"243","endLine":55,"endColumn":7,"suggestions":"263"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"262","line":59,"column":6,"nodeType":"243","endLine":59,"endColumn":8,"suggestions":"264"},{"ruleId":"241","severity":1,"message":"265","line":91,"column":6,"nodeType":"243","endLine":91,"endColumn":8,"suggestions":"266"},{"ruleId":"241","severity":1,"message":"267","line":75,"column":8,"nodeType":"243","endLine":75,"endColumn":10,"suggestions":"268"},{"ruleId":"245","severity":1,"message":"269","line":12,"column":3,"nodeType":"247","messageId":"248","endLine":12,"endColumn":18},{"ruleId":"245","severity":1,"message":"270","line":37,"column":5,"nodeType":"247","messageId":"248","endLine":37,"endColumn":13},{"ruleId":"245","severity":1,"message":"271","line":41,"column":5,"nodeType":"247","messageId":"248","endLine":41,"endColumn":8},{"ruleId":"245","severity":1,"message":"272","line":43,"column":5,"nodeType":"247","messageId":"248","endLine":43,"endColumn":13},{"ruleId":"241","severity":1,"message":"273","line":121,"column":6,"nodeType":"243","endLine":121,"endColumn":8,"suggestions":"274"},{"ruleId":"245","severity":1,"message":"270","line":26,"column":5,"nodeType":"247","messageId":"248","endLine":26,"endColumn":13},{"ruleId":"245","severity":1,"message":"275","line":39,"column":5,"nodeType":"247","messageId":"248","endLine":39,"endColumn":16},{"ruleId":"245","severity":1,"message":"276","line":40,"column":5,"nodeType":"247","messageId":"248","endLine":40,"endColumn":10},{"ruleId":"245","severity":1,"message":"277","line":41,"column":5,"nodeType":"247","messageId":"248","endLine":41,"endColumn":16},{"ruleId":"245","severity":1,"message":"278","line":42,"column":5,"nodeType":"247","messageId":"248","endLine":42,"endColumn":16},{"ruleId":"237","replacedBy":"279"},{"ruleId":"239","replacedBy":"280"},{"ruleId":"245","severity":1,"message":"281","line":1,"column":30,"nodeType":"247","messageId":"248","endLine":1,"endColumn":41},{"ruleId":"245","severity":1,"message":"282","line":15,"column":7,"nodeType":"247","messageId":"248","endLine":15,"endColumn":14},{"ruleId":"241","severity":1,"message":"283","line":60,"column":6,"nodeType":"243","endLine":60,"endColumn":8,"suggestions":"284"},{"ruleId":"245","severity":1,"message":"285","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":26},"no-native-reassign",["286"],"no-negated-in-lhs",["287"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.","ArrayExpression",["288"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getProfile' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'checked' is assigned a value but never used.",["289"],"'formik' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions' and 'formik'. Either include them or remove the dependency array.",["290"],"React Hook useEffect has missing dependencies: 'actions' and 'history'. Either include them or remove the dependency array.",["291"],["292"],"React Hook useEffect has a missing dependency: 'recipeSearchHandler'. Either include it or remove the dependency array.",["293"],"React Hook useEffect has a missing dependency: 'getSavedHandler'. Either include it or remove the dependency array.",["294"],"'getSingleRecipe' is defined but never used.","'recipeID' is assigned a value but never used.","'_id' is assigned a value but never used.","'username' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions', 'checkSingleRecipeLocal', and 'id'. Either include them or remove the dependency array.",["295"],"'veryHealthy' is assigned a value but never used.","'cheap' is assigned a value but never used.","'veryPopular' is assigned a value but never used.","'sustainable' is assigned a value but never used.",["286"],["287"],"'getUsername' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions', 'history', and 'token'. Either include them or remove the dependency array.",["296"],"'SearchRecipeButton' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"297","fix":"298"},{"desc":"297","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"302","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},"Update the dependencies array to be: [actions]",{"range":"313","text":"314"},{"range":"315","text":"314"},"Update the dependencies array to be: [actions, formik]",{"range":"316","text":"317"},"Update the dependencies array to be: [actions, history]",{"range":"318","text":"319"},{"range":"320","text":"319"},"Update the dependencies array to be: [recipeSearchHandler]",{"range":"321","text":"322"},"Update the dependencies array to be: [getSavedHandler]",{"range":"323","text":"324"},"Update the dependencies array to be: [actions, checkSingleRecipeLocal, id]",{"range":"325","text":"326"},"Update the dependencies array to be: [actions, history, token]",{"range":"327","text":"328"},[1571,1573],"[actions]",[2274,2276],[3081,3083],"[actions, formik]",[1923,1925],"[actions, history]",[1896,1898],[2880,2882],"[recipeSearchHandler]",[2700,2702],"[getSavedHandler]",[3481,3483],"[actions, checkSingleRecipeLocal, id]",[1699,1701],"[actions, history, token]"]